/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.notify.conf 17838 2009-11-25 20:35:23Z magfr $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

#include "tlv_enc_dec.h"
#include "bs_events.h"
#include "enbNonAlarmNotifications.h"

extern const oid snmptrap_oid;
extern const size_t snmptrap_oid_len;

int
send_counterFileAvailable_trap( NotiObj *notiMsg )
{
    netsnmp_variable_list  *var_list = NULL;
    const oid counterFileAvailable_oid[] = { 1,3,6,1,4,1,9344,501,501,1,8 };
    const oid enodebId_oid[] = { 1,3,6,1,4,1,9344,501,106,1,1,2,1 };
    const oid notificationSequenceNumber_oid[] = { 1,3,6,1,4,1,9344,501,600,7, 0 };
    const oid dateAndTimeStamp_oid[] = { 1,3,6,1,4,1,9344,501,600,2, 0 };
    const oid fileName_oid[] = { 1,3,6,1,4,1,9344,501,5,1,1,2,1 };
    unsigned int uiVal;

    logInfo("Sending Counter File Available Notification ID = %d ", notiMsg->notiId);

    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
        &snmptrap_oid, snmptrap_oid_len,
        ASN_OBJECT_ID,
        counterFileAvailable_oid, sizeof(counterFileAvailable_oid));
    
    /*
     * Add any objects from the trap definition
     */
    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_COUNTERFILEAVAILABLE_ENODEBID-1].data);
    snmp_varlist_add_variable(&var_list,
        enodebId_oid, OID_LENGTH(enodebId_oid),
        ASN_UNSIGNED,
        &uiVal,
        notiMsg->notiTlvInfo[COL_COUNTERFILEAVAILABLE_ENODEBID-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_COUNTERFILEAVAILABLE_NOTIFICATIONSEQUENCENUMBER-1].data);
    snmp_varlist_add_variable(&var_list,
        notificationSequenceNumber_oid, OID_LENGTH(notificationSequenceNumber_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_COUNTERFILEAVAILABLE_NOTIFICATIONSEQUENCENUMBER-1].len);

    snmp_varlist_add_variable(&var_list,
        dateAndTimeStamp_oid, OID_LENGTH(dateAndTimeStamp_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_COUNTERFILEAVAILABLE_DATEANDTIMESTAMP-1].data,
        notiMsg->notiTlvInfo[COL_COUNTERFILEAVAILABLE_DATEANDTIMESTAMP-1].len);

    snmp_varlist_add_variable(&var_list,
        fileName_oid, OID_LENGTH(fileName_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_COUNTERFILEAVAILABLE_FILENAME-1].data,
        notiMsg->notiTlvInfo[COL_COUNTERFILEAVAILABLE_FILENAME-1].len);

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    send_v2trap( var_list );
    snmp_free_varbind( var_list );

    return SNMP_ERR_NOERROR;
}

int
send_counterCollectionFailed_trap( NotiObj *notiMsg )
{
    netsnmp_variable_list  *var_list = NULL;
    const oid counterCollectionFailed_oid[] = { 1,3,6,1,4,1,9344,501,501,1,9 };
    const oid enodebId_oid[] = { 1,3,6,1,4,1,9344,501,106,1,1,2,1 };
    const oid notificationSequenceNumber_oid[] = { 1,3,6,1,4,1,9344,501,600,7, 0 };
    const oid dateAndTimeStamp_oid[] = { 1,3,6,1,4,1,9344,501,600,2, 0 };
    const oid errorInfo_oid[] = { 1,3,6,1,4,1,9344,501,600,4, 0 };
    unsigned int uiVal;

    logInfo("Sending Counter Collection Failure Notification ID = %d ", notiMsg->notiId);

    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
        &snmptrap_oid, snmptrap_oid_len,
        ASN_OBJECT_ID,
        counterCollectionFailed_oid, sizeof(counterCollectionFailed_oid));
    
    /*
     * Add any objects from the trap definition
     */
    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_COUNTERCOLLECTIONFAILED_ENODEBID-1].data);
    snmp_varlist_add_variable(&var_list,
        enodebId_oid, OID_LENGTH(enodebId_oid),
        ASN_UNSIGNED,
        &uiVal,
        notiMsg->notiTlvInfo[COL_COUNTERCOLLECTIONFAILED_ENODEBID-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_COUNTERCOLLECTIONFAILED_NOTIFICATIONSEQUENCENUMBER-1].data);
    snmp_varlist_add_variable(&var_list,
        notificationSequenceNumber_oid, OID_LENGTH(notificationSequenceNumber_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_COUNTERCOLLECTIONFAILED_NOTIFICATIONSEQUENCENUMBER-1].len);

    snmp_varlist_add_variable(&var_list,
        dateAndTimeStamp_oid, OID_LENGTH(dateAndTimeStamp_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_COUNTERCOLLECTIONFAILED_DATEANDTIMESTAMP-1].data,
        notiMsg->notiTlvInfo[COL_COUNTERCOLLECTIONFAILED_DATEANDTIMESTAMP-1].len);

    snmp_varlist_add_variable(&var_list,
        errorInfo_oid, OID_LENGTH(errorInfo_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_COUNTERCOLLECTIONFAILED_ERRORINFO-1].data,
        notiMsg->notiTlvInfo[COL_COUNTERCOLLECTIONFAILED_ERRORINFO-1].len);

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    send_v2trap( var_list );
    snmp_free_varbind( var_list );

    return SNMP_ERR_NOERROR;
}


int
send_mmeReset_trap( NotiObj *notiMsg )
{
    netsnmp_variable_list  *var_list = NULL;
    const oid mmeReset_oid[] = { 1,3,6,1,4,1,9344,501,501,1,1 };
    const oid enodebId_oid[] = { 1,3,6,1,4,1,9344,501,106,1,1,2,1 };
    const oid notificationSequenceNumber_oid[] = { 1,3,6,1,4,1,9344,501,600,7,0 };
    const oid dateAndTimeStamp_oid[] = { 1,3,6,1,4,1,9344,501,600,2,0 };
    const oid mmeAddr_oid[] = { 1,3,6,1,4,1,9344,501,66,1,1,2,1 };
    unsigned int uiVal;

    logInfo("Sending MME Reset Notification ID = %d ", notiMsg->notiId);

    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
        &snmptrap_oid, snmptrap_oid_len,
        ASN_OBJECT_ID,
        mmeReset_oid, sizeof(mmeReset_oid));
    
    /*
     * Add any objects from the trap definition
     */
    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_MMERESET_ENODEBID-1].data);
    snmp_varlist_add_variable(&var_list,
        enodebId_oid, OID_LENGTH(enodebId_oid),
        ASN_UNSIGNED,
        &uiVal,
        notiMsg->notiTlvInfo[COL_MMERESET_ENODEBID-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_MMERESET_NOTIFICATIONSEQUENCENUMBER-1].data);
    snmp_varlist_add_variable(&var_list,
        notificationSequenceNumber_oid, OID_LENGTH(notificationSequenceNumber_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_MMERESET_NOTIFICATIONSEQUENCENUMBER-1].len);

    snmp_varlist_add_variable(&var_list,
        dateAndTimeStamp_oid, OID_LENGTH(dateAndTimeStamp_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_MMERESET_DATEANDTIMESTAMP-1].data,
        notiMsg->notiTlvInfo[COL_MMERESET_DATEANDTIMESTAMP-1].len);

    snmp_varlist_add_variable(&var_list,
        mmeAddr_oid, OID_LENGTH(mmeAddr_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_MMERESET_MMEIPADDR-1].data,
        notiMsg->notiTlvInfo[COL_MMERESET_MMEIPADDR-1].len);

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    send_v2trap( var_list );
    snmp_free_varbind( var_list );

    return SNMP_ERR_NOERROR;
}


int
send_fileUploadCompleted_trap( NotiObj *notiMsg )
{
    netsnmp_variable_list  *var_list = NULL;
    const oid fileUploadCompleted_oid[] = { 1,3,6,1,4,1,9344,501,501,1,2 };
    const oid enodebId_oid[] = { 1,3,6,1,4,1,9344,501,106,1,1,2,1 };
    const oid notificationSequenceNumber_oid[] = { 1,3,6,1,4,1,9344,501,600,7, 0 };
    const oid dateAndTimeStamp_oid[] = { 1,3,6,1,4,1,9344,501,600,2, 0 };
    const oid fileName_oid[] = { 1,3,6,1,4,1,9344,501,5,1,1,2,1 };
    unsigned int uiVal;

    logInfo("Sending File Upload Completed Notification ID = %d ", notiMsg->notiId);

    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
        &snmptrap_oid, snmptrap_oid_len,
        ASN_OBJECT_ID,
        fileUploadCompleted_oid, sizeof(fileUploadCompleted_oid));
    
    /*
     * Add any objects from the trap definition
     */
    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_FILEUPLOADCOMPLETED_ENODEBID-1].data);
    snmp_varlist_add_variable(&var_list,
        enodebId_oid, OID_LENGTH(enodebId_oid),
        ASN_UNSIGNED,
        &uiVal,
        notiMsg->notiTlvInfo[COL_FILEUPLOADCOMPLETED_ENODEBID-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_FILEUPLOADCOMPLETED_NOTIFICATIONSEQUENCENUMBER-1].data);
    snmp_varlist_add_variable(&var_list,
        notificationSequenceNumber_oid, OID_LENGTH(notificationSequenceNumber_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_FILEUPLOADCOMPLETED_NOTIFICATIONSEQUENCENUMBER-1].len);

    snmp_varlist_add_variable(&var_list,
        dateAndTimeStamp_oid, OID_LENGTH(dateAndTimeStamp_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_FILEUPLOADCOMPLETED_DATEANDTIMESTAMP-1].data,
        notiMsg->notiTlvInfo[COL_FILEUPLOADCOMPLETED_DATEANDTIMESTAMP-1].len);

    snmp_varlist_add_variable(&var_list,
        fileName_oid, OID_LENGTH(fileName_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_FILEUPLOADCOMPLETED_FILENAME-1].data,
        notiMsg->notiTlvInfo[COL_FILEUPLOADCOMPLETED_FILENAME-1].len);

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    send_v2trap( var_list );
    snmp_free_varbind( var_list );

    return SNMP_ERR_NOERROR;
}


int
send_fileUploadFailed_trap( NotiObj *notiMsg )
{
    netsnmp_variable_list  *var_list = NULL;
    const oid fileUploadFailed_oid[] = { 1,3,6,1,4,1,9344,501,501,1,3 };
    const oid enodebId_oid[] = { 1,3,6,1,4,1,9344,501,106,1,1,2,1 };
    const oid notificationSequenceNumber_oid[] = { 1,3,6,1,4,1,9344,501,600,7, 0 };
    const oid dateAndTimeStamp_oid[] = { 1,3,6,1,4,1,9344,501,600,2, 0 };
    const oid fileName_oid[] = { 1,3,6,1,4,1,9344,501,5,1,1,2,1 };
    const oid errorInfo_oid[] = { 1,3,6,1,4,1,9344,501,600,4, 0 };
    unsigned int uiVal;

    logInfo("Sending File Upload Fail Notification ID = %d ", notiMsg->notiId);

    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
        &snmptrap_oid, snmptrap_oid_len,
        ASN_OBJECT_ID,
        fileUploadFailed_oid, sizeof(fileUploadFailed_oid));
    
    /*
     * Add any objects from the trap definition
     */
    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_FILEUPLOADFAILED_ENODEBID-1].data);
    snmp_varlist_add_variable(&var_list,
        enodebId_oid, OID_LENGTH(enodebId_oid),
        ASN_UNSIGNED,
        &uiVal,
        notiMsg->notiTlvInfo[COL_FILEUPLOADFAILED_ENODEBID-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_FILEUPLOADFAILED_NOTIFICATIONSEQUENCENUMBER-1].data);
    snmp_varlist_add_variable(&var_list,
        notificationSequenceNumber_oid, OID_LENGTH(notificationSequenceNumber_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_FILEUPLOADFAILED_NOTIFICATIONSEQUENCENUMBER-1].len);

    snmp_varlist_add_variable(&var_list,
        dateAndTimeStamp_oid, OID_LENGTH(dateAndTimeStamp_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_FILEUPLOADFAILED_DATEANDTIMESTAMP-1].data,
        notiMsg->notiTlvInfo[COL_FILEUPLOADFAILED_DATEANDTIMESTAMP-1].len);

    snmp_varlist_add_variable(&var_list,
        fileName_oid, OID_LENGTH(fileName_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_FILEUPLOADFAILED_FILENAME-1].data,
        notiMsg->notiTlvInfo[COL_FILEUPLOADFAILED_FILENAME-1].len);

    snmp_varlist_add_variable(&var_list,
        errorInfo_oid, OID_LENGTH(errorInfo_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_FILEUPLOADFAILED_ERRORINFO-1].data,
        notiMsg->notiTlvInfo[COL_FILEUPLOADFAILED_ERRORINFO-1].len);

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    send_v2trap( var_list );
    snmp_free_varbind( var_list );

    return SNMP_ERR_NOERROR;
}


int
send_messageTraceCompleted_trap( NotiObj *notiMsg )
{
    netsnmp_variable_list  *var_list = NULL;
    const oid messageTraceCompleted_oid[] = { 1,3,6,1,4,1,9344,501,501,1,6 };
    const oid enodebId_oid[] = { 1,3,6,1,4,1,9344,501,106,1,1,2,1 };
    const oid notificationSequenceNumber_oid[] = { 1,3,6,1,4,1,9344,501,600,7, 0 };
    const oid dateAndTimeStamp_oid[] = { 1,3,6,1,4,1,9344,501,600,2, 0 };
    const oid fileName_oid[] = { 1,3,6,1,4,1,9344,501,5,1,1,2,1 };
    unsigned int uiVal;

    logInfo("Sending Trace Completed Notification ID = %d ", notiMsg->notiId);

    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
        &snmptrap_oid, snmptrap_oid_len,
        ASN_OBJECT_ID,
        messageTraceCompleted_oid, sizeof(messageTraceCompleted_oid));
    
    /*
     * Add any objects from the trap definition
     */
    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_MESSAGETRACECOMPLETED_ENODEBID-1].data);
    snmp_varlist_add_variable(&var_list,
        enodebId_oid, OID_LENGTH(enodebId_oid),
        ASN_UNSIGNED,
        &uiVal,
        notiMsg->notiTlvInfo[COL_MESSAGETRACECOMPLETED_ENODEBID-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_MESSAGETRACECOMPLETED_NOTIFICATIONSEQUENCENUMBER-1].data);
    snmp_varlist_add_variable(&var_list,
        notificationSequenceNumber_oid, OID_LENGTH(notificationSequenceNumber_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_MESSAGETRACECOMPLETED_NOTIFICATIONSEQUENCENUMBER-1].len);

    snmp_varlist_add_variable(&var_list,
        dateAndTimeStamp_oid, OID_LENGTH(dateAndTimeStamp_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_MESSAGETRACECOMPLETED_DATEANDTIMESTAMP-1].data,
        notiMsg->notiTlvInfo[COL_MESSAGETRACECOMPLETED_DATEANDTIMESTAMP-1].len);

    snmp_varlist_add_variable(&var_list,
        fileName_oid, OID_LENGTH(fileName_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_MESSAGETRACECOMPLETED_FILENAME-1].data,
        notiMsg->notiTlvInfo[COL_MESSAGETRACECOMPLETED_FILENAME-1].len);

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    send_v2trap( var_list );
    snmp_free_varbind( var_list );

    return SNMP_ERR_NOERROR;
}


int
send_messageTraceFailed_trap( NotiObj *notiMsg )
{
    netsnmp_variable_list  *var_list = NULL;
    const oid messageTraceFailed_oid[] = { 1,3,6,1,4,1,9344,501,501,1,7 };
    const oid enodebId_oid[] = { 1,3,6,1,4,1,9344,501,106,1,1,2,1 };
    const oid notificationSequenceNumber_oid[] = { 1,3,6,1,4,1,9344,501,600,7, 0 };
    const oid dateAndTimeStamp_oid[] = { 1,3,6,1,4,1,9344,501,600,2, 0 };
    const oid errorInfo_oid[] = { 1,3,6,1,4,1,9344,501,600,4, 0 };
    unsigned int uiVal;

    logInfo("Sending Trace Failed Notification ID = %d ", notiMsg->notiId);

    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
        &snmptrap_oid, snmptrap_oid_len,
        ASN_OBJECT_ID,
        messageTraceFailed_oid, sizeof(messageTraceFailed_oid));
    
    /*
     * Add any objects from the trap definition
     */
    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_MESSAGETRACEFAILED_ENODEBID-1].data);
    snmp_varlist_add_variable(&var_list,
        enodebId_oid, OID_LENGTH(enodebId_oid),
        ASN_UNSIGNED,
        &uiVal,
        notiMsg->notiTlvInfo[COL_MESSAGETRACEFAILED_ENODEBID-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_MESSAGETRACEFAILED_NOTIFICATIONSEQUENCENUMBER-1].data);
    snmp_varlist_add_variable(&var_list,
        notificationSequenceNumber_oid, OID_LENGTH(notificationSequenceNumber_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_MESSAGETRACEFAILED_NOTIFICATIONSEQUENCENUMBER-1].len);

    snmp_varlist_add_variable(&var_list,
        dateAndTimeStamp_oid, OID_LENGTH(dateAndTimeStamp_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_MESSAGETRACEFAILED_DATEANDTIMESTAMP-1].data,
        notiMsg->notiTlvInfo[COL_MESSAGETRACEFAILED_DATEANDTIMESTAMP-1].len);

    snmp_varlist_add_variable(&var_list,
        errorInfo_oid, OID_LENGTH(errorInfo_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_MESSAGETRACEFAILED_ERRORINFO-1].data,
        notiMsg->notiTlvInfo[COL_MESSAGETRACEFAILED_ERRORINFO-1].len);

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    send_v2trap( var_list );
    snmp_free_varbind( var_list );

    return SNMP_ERR_NOERROR;
}


int
send_configurationChanged_trap( NotiObj *notiMsg )
{
    netsnmp_variable_list  *var_list = NULL;
    const oid configurationChanged_oid[] = { 1,3,6,1,4,1,9344,501,501,1,10 };
    const oid enodebId_oid[] = { 1,3,6,1,4,1,9344,501,106,1,1,2,1 };
    const oid notificationSequenceNumber_oid[] = { 1,3,6,1,4,1,9344,501,600,7, 0 };
    const oid dateAndTimeStamp_oid[] = { 1,3,6,1,4,1,9344,501,600,2, 0 };
    const oid oamIf_oid[] = { 1,3,6,1,4,1,9344,501,600,5, 0 };
    unsigned int uiVal;

    logInfo("Sending Config Changed Notification ID = %d ", notiMsg->notiId);

    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
        &snmptrap_oid, snmptrap_oid_len,
        ASN_OBJECT_ID,
        configurationChanged_oid, sizeof(configurationChanged_oid));
    
    /*
     * Add any objects from the trap definition
     */
    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_CONFIGURATIONCHANGED_ENODEBID-1].data);
    snmp_varlist_add_variable(&var_list,
        enodebId_oid, OID_LENGTH(enodebId_oid),
        ASN_UNSIGNED,
        &uiVal,
        notiMsg->notiTlvInfo[COL_CONFIGURATIONCHANGED_ENODEBID-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_CONFIGURATIONCHANGED_NOTIFICATIONSEQUENCENUMBER-1].data);
    snmp_varlist_add_variable(&var_list,
        notificationSequenceNumber_oid, OID_LENGTH(notificationSequenceNumber_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_CONFIGURATIONCHANGED_NOTIFICATIONSEQUENCENUMBER-1].len);

    snmp_varlist_add_variable(&var_list,
        dateAndTimeStamp_oid, OID_LENGTH(dateAndTimeStamp_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_CONFIGURATIONCHANGED_DATEANDTIMESTAMP-1].data,
        notiMsg->notiTlvInfo[COL_CONFIGURATIONCHANGED_DATEANDTIMESTAMP-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_CONFIGURATIONCHANGED_OAMIFTYPE-1].data);
    snmp_varlist_add_variable(&var_list,
        oamIf_oid, OID_LENGTH(oamIf_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_CONFIGURATIONCHANGED_OAMIFTYPE-1].len);

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    send_v2trap( var_list );
    snmp_free_varbind( var_list );

    return SNMP_ERR_NOERROR;
}


int
send_swActivationFailed_trap( NotiObj *notiMsg )
{
    netsnmp_variable_list  *var_list = NULL;
    const oid swActivationFailed_oid[] = { 1,3,6,1,4,1,9344,501,501,1,13 };
    const oid enodebId_oid[] = { 1,3,6,1,4,1,9344,501,106,1,1,2,1 };
    const oid notificationSequenceNumber_oid[] = { 1,3,6,1,4,1,9344,501,600,7, 0 };
    const oid dateAndTimeStamp_oid[] = { 1,3,6,1,4,1,9344,501,600,2, 0 };
    const oid swType_oid[] = { 1,3,6,1,4,1,9344,501,4,1,1,2,1 };
    const oid version_oid[] = { 1,3,6,1,4,1,9344,501,4,1,1,3,1 };
    const oid errorInfo_oid[] = { 1,3,6,1,4,1,9344,501,600,4, 0 };
    unsigned int uiVal;

    logInfo("Sending Sw Activation Fail Notification ID = %d ", notiMsg->notiId);
    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
        &snmptrap_oid, snmptrap_oid_len,
        ASN_OBJECT_ID,
        swActivationFailed_oid, sizeof(swActivationFailed_oid));
    
    /*
     * Add any objects from the trap definition
     */
    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_SWACTIVATIONFAILED_ENODEBID-1].data);
    snmp_varlist_add_variable(&var_list,
        enodebId_oid, OID_LENGTH(enodebId_oid),
        ASN_UNSIGNED,
        &uiVal,
        notiMsg->notiTlvInfo[COL_SWACTIVATIONFAILED_ENODEBID-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_SWACTIVATIONFAILED_NOTIFICATIONSEQUENCENUMBER-1].data);
    snmp_varlist_add_variable(&var_list,
        notificationSequenceNumber_oid, OID_LENGTH(notificationSequenceNumber_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_SWACTIVATIONFAILED_NOTIFICATIONSEQUENCENUMBER-1].len);

    snmp_varlist_add_variable(&var_list,
        dateAndTimeStamp_oid, OID_LENGTH(dateAndTimeStamp_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_SWACTIVATIONFAILED_DATEANDTIMESTAMP-1].data,
        notiMsg->notiTlvInfo[COL_SWACTIVATIONFAILED_DATEANDTIMESTAMP-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_SWACTIVATIONFAILED_SWTYPE-1].data);
    snmp_varlist_add_variable(&var_list,
        swType_oid, OID_LENGTH(swType_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_SWACTIVATIONFAILED_SWTYPE-1].len);

    snmp_varlist_add_variable(&var_list,
        version_oid, OID_LENGTH(version_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_SWACTIVATIONFAILED_VERSION-1].data,
        notiMsg->notiTlvInfo[COL_SWACTIVATIONFAILED_VERSION-1].len);

    snmp_varlist_add_variable(&var_list,
        errorInfo_oid, OID_LENGTH(errorInfo_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_SWACTIVATIONFAILED_ERRORINFO-1].data,
        notiMsg->notiTlvInfo[COL_SWACTIVATIONFAILED_ERRORINFO-1].len);

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    send_v2trap( var_list );
    snmp_free_varbind( var_list );

    return SNMP_ERR_NOERROR;
}

int
send_swActivationSuccess_trap( NotiObj *notiMsg )
{
    netsnmp_variable_list  *var_list = NULL;
    const oid swActivationSuccess_oid[] = { 1,3,6,1,4,1,9344,501,501,1,14 };
    const oid enodebId_oid[] = { 1,3,6,1,4,1,9344,501,106,1,1,2,1 };
    const oid notificationSequenceNumber_oid[] = { 1,3,6,1,4,1,9344,501,600,7, 0 };
    const oid dateAndTimeStamp_oid[] = { 1,3,6,1,4,1,9344,501,600,2, 0 };
    const oid swType_oid[] = { 1,3,6,1,4,1,9344,501,4,1,1,2,1 };
    const oid version_oid[] = { 1,3,6,1,4,1,9344,501,4,1,1,3,1 };
    unsigned int uiVal;

    logInfo("Sending Sw Activation Success Notification ID = %d ", notiMsg->notiId);
    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
        &snmptrap_oid, snmptrap_oid_len,
        ASN_OBJECT_ID,
        swActivationSuccess_oid, sizeof(swActivationSuccess_oid));
    
    /*
     * Add any objects from the trap definition
     */
    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_SWACTIVATIONSUCCESS_ENODEBID-1].data);
    snmp_varlist_add_variable(&var_list,
        enodebId_oid, OID_LENGTH(enodebId_oid),
        ASN_UNSIGNED,
        &uiVal,
        notiMsg->notiTlvInfo[COL_SWACTIVATIONSUCCESS_ENODEBID-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_SWACTIVATIONSUCCESS_NOTIFICATIONSEQUENCENUMBER-1].data);
    snmp_varlist_add_variable(&var_list,
        notificationSequenceNumber_oid, OID_LENGTH(notificationSequenceNumber_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_SWACTIVATIONSUCCESS_NOTIFICATIONSEQUENCENUMBER-1].len);

    snmp_varlist_add_variable(&var_list,
        dateAndTimeStamp_oid, OID_LENGTH(dateAndTimeStamp_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_SWACTIVATIONSUCCESS_DATEANDTIMESTAMP-1].data,
        notiMsg->notiTlvInfo[COL_SWACTIVATIONSUCCESS_DATEANDTIMESTAMP-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_SWACTIVATIONSUCCESS_SWTYPE-1].data);
    snmp_varlist_add_variable(&var_list,
        swType_oid, OID_LENGTH(swType_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_SWACTIVATIONSUCCESS_SWTYPE-1].len);

    snmp_varlist_add_variable(&var_list,
        version_oid, OID_LENGTH(version_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_SWACTIVATIONSUCCESS_VERSION-1].data,
        notiMsg->notiTlvInfo[COL_SWACTIVATIONSUCCESS_VERSION-1].len);

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    send_v2trap( var_list );
    snmp_free_varbind( var_list );

    return SNMP_ERR_NOERROR;
}

int
send_swInstallFailed_trap( NotiObj *notiMsg )
{
    netsnmp_variable_list  *var_list = NULL;
    const oid swInstallFailed_oid[] = { 1,3,6,1,4,1,9344,501,501,1,15 };
    const oid enodebId_oid[] = { 1,3,6,1,4,1,9344,501,106,1,1,2,1 };
    const oid notificationSequenceNumber_oid[] = { 1,3,6,1,4,1,9344,501,600,7, 0 };
    const oid dateAndTimeStamp_oid[] = { 1,3,6,1,4,1,9344,501,600,2, 0 };
    const oid fileName_oid[] = { 1,3,6,1,4,1,9344,501,5,1,1,2,1 };
    const oid errorInfo_oid[] = { 1,3,6,1,4,1,9344,501,600,4, 0 };
    unsigned int uiVal;

    logInfo("Sending Sw Install Failed Notification ID = %d ", notiMsg->notiId);
    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
        &snmptrap_oid, snmptrap_oid_len,
        ASN_OBJECT_ID,
        swInstallFailed_oid, sizeof(swInstallFailed_oid));
    
    /*
     * Add any objects from the trap definition
     */
    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_SWINSTALLFAILED_ENODEBID-1].data);
    snmp_varlist_add_variable(&var_list,
        enodebId_oid, OID_LENGTH(enodebId_oid),
        ASN_UNSIGNED,
        &uiVal,
        notiMsg->notiTlvInfo[COL_SWINSTALLFAILED_ENODEBID-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_SWINSTALLFAILED_NOTIFICATIONSEQUENCENUMBER-1].data);
    snmp_varlist_add_variable(&var_list,
        notificationSequenceNumber_oid, OID_LENGTH(notificationSequenceNumber_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_SWINSTALLFAILED_NOTIFICATIONSEQUENCENUMBER-1].len);

    snmp_varlist_add_variable(&var_list,
        dateAndTimeStamp_oid, OID_LENGTH(dateAndTimeStamp_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_SWINSTALLFAILED_DATEANDTIMESTAMP-1].data,
        notiMsg->notiTlvInfo[COL_SWINSTALLFAILED_DATEANDTIMESTAMP-1].len);

    snmp_varlist_add_variable(&var_list,
        fileName_oid, OID_LENGTH(fileName_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_SWINSTALLFAILED_FILENAME-1].data,
        notiMsg->notiTlvInfo[COL_SWINSTALLFAILED_FILENAME-1].len);

    snmp_varlist_add_variable(&var_list,
        errorInfo_oid, OID_LENGTH(errorInfo_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_SWINSTALLFAILED_ERRORINFO-1].data,
        notiMsg->notiTlvInfo[COL_SWINSTALLFAILED_ERRORINFO-1].len);

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    send_v2trap( var_list );
    snmp_free_varbind( var_list );

    return SNMP_ERR_NOERROR;
}


int
send_swInstallSuccess_trap( NotiObj *notiMsg )
{
    netsnmp_variable_list  *var_list = NULL;
    const oid swInstallSuccess_oid[] = { 1,3,6,1,4,1,9344,501,501,1,16 };
    const oid enodebId_oid[] = { 1,3,6,1,4,1,9344,501,106,1,1,2,1 };
    const oid notificationSequenceNumber_oid[] = { 1,3,6,1,4,1,9344,501,600,7, 0 };
    const oid dateAndTimeStamp_oid[] = { 1,3,6,1,4,1,9344,501,600,2, 0 };
    const oid fileName_oid[] = { 1,3,6,1,4,1,9344,501,5,1,1,2,1 };
    const oid version_oid[] = { 1,3,6,1,4,1,9344,501,4,1,1,3,1 };
    unsigned int uiVal;

    logInfo("Sending Sw Install Success Notification ID = %d ", notiMsg->notiId);
    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
        &snmptrap_oid, snmptrap_oid_len,
        ASN_OBJECT_ID,
        swInstallSuccess_oid, sizeof(swInstallSuccess_oid));
    
    /*
     * Add any objects from the trap definition
     */
    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_SWINSTALLSUCCESS_ENODEBID-1].data);
    snmp_varlist_add_variable(&var_list,
        enodebId_oid, OID_LENGTH(enodebId_oid),
        ASN_UNSIGNED,
        &uiVal,
        notiMsg->notiTlvInfo[COL_SWINSTALLSUCCESS_ENODEBID-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_SWINSTALLSUCCESS_NOTIFICATIONSEQUENCENUMBER-1].data);
    snmp_varlist_add_variable(&var_list,
        notificationSequenceNumber_oid, OID_LENGTH(notificationSequenceNumber_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_SWINSTALLSUCCESS_NOTIFICATIONSEQUENCENUMBER-1].len);

    snmp_varlist_add_variable(&var_list,
        dateAndTimeStamp_oid, OID_LENGTH(dateAndTimeStamp_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_SWINSTALLSUCCESS_DATEANDTIMESTAMP-1].data,
        notiMsg->notiTlvInfo[COL_SWINSTALLSUCCESS_DATEANDTIMESTAMP-1].len);

    snmp_varlist_add_variable(&var_list,
        fileName_oid, OID_LENGTH(fileName_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_SWINSTALLSUCCESS_FILENAME-1].data,
        notiMsg->notiTlvInfo[COL_SWINSTALLSUCCESS_FILENAME-1].len);

    snmp_varlist_add_variable(&var_list,
        version_oid, OID_LENGTH(version_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_SWINSTALLSUCCESS_VERSION-1].data,
        notiMsg->notiTlvInfo[COL_SWINSTALLSUCCESS_VERSION-1].len);

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    send_v2trap( var_list );
    snmp_free_varbind( var_list );

    return SNMP_ERR_NOERROR;
}


int
send_configurationSaved_trap( NotiObj *notiMsg )
{
    netsnmp_variable_list  *var_list = NULL;
    const oid configurationSaved_oid[] = { 1,3,6,1,4,1,9344,501,501,1,11 };
    const oid enodebId_oid[] = { 1,3,6,1,4,1,9344,501,106,1,1,2,1 };
    const oid notificationSequenceNumber_oid[] = { 1,3,6,1,4,1,9344,501,600,7, 0 };
    const oid dateAndTimeStamp_oid[] = { 1,3,6,1,4,1,9344,501,600,2, 0 };
    const oid oamIf_oid[] = { 1,3,6,1,4,1,9344,501,600,5, 0 };
    unsigned int uiVal;

    logInfo("Sending Configuration Saved Notification ID = %d ", notiMsg->notiId);
    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
        &snmptrap_oid, snmptrap_oid_len,
        ASN_OBJECT_ID,
        configurationSaved_oid, sizeof(configurationSaved_oid));
    
    /*
     * Add any objects from the trap definition
     */
    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_CONFIGURATIONSAVED_ENODEBID-1].data);
    snmp_varlist_add_variable(&var_list,
        enodebId_oid, OID_LENGTH(enodebId_oid),
        ASN_UNSIGNED,
        &uiVal,
        notiMsg->notiTlvInfo[COL_CONFIGURATIONSAVED_ENODEBID-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_CONFIGURATIONSAVED_NOTIFICATIONSEQUENCENUMBER-1].data);
    snmp_varlist_add_variable(&var_list,
        notificationSequenceNumber_oid, OID_LENGTH(notificationSequenceNumber_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_CONFIGURATIONSAVED_NOTIFICATIONSEQUENCENUMBER-1].len);

    snmp_varlist_add_variable(&var_list,
        dateAndTimeStamp_oid, OID_LENGTH(dateAndTimeStamp_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_CONFIGURATIONSAVED_DATEANDTIMESTAMP-1].data,
        notiMsg->notiTlvInfo[COL_CONFIGURATIONSAVED_DATEANDTIMESTAMP-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_CONFIGURATIONSAVED_OAMIFTYPE-1].data);
    snmp_varlist_add_variable(&var_list,
        oamIf_oid, OID_LENGTH(oamIf_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_CONFIGURATIONSAVED_OAMIFTYPE-1].len);

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    send_v2trap( var_list );
    snmp_free_varbind( var_list );

    return SNMP_ERR_NOERROR;
}


int
send_configurationRollBack_trap( NotiObj *notiMsg )
{
    netsnmp_variable_list  *var_list = NULL;
    const oid configurationRollBack_oid[] = { 1,3,6,1,4,1,9344,501,501,1,12 };
    const oid enodebId_oid[] = { 1,3,6,1,4,1,9344,501,106,1,1,2,1 };
    const oid notificationSequenceNumber_oid[] = { 1,3,6,1,4,1,9344,501,600,7, 0 };
    const oid dateAndTimeStamp_oid[] = { 1,3,6,1,4,1,9344,501,600,2, 0 };
    const oid oamIf_oid[] = { 1,3,6,1,4,1,9344,501,600,5, 0 };
    unsigned int uiVal;

    logInfo("Sending Configuration Rollback Notification ID = %d ", notiMsg->notiId);
    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
        &snmptrap_oid, snmptrap_oid_len,
        ASN_OBJECT_ID,
        configurationRollBack_oid, sizeof(configurationRollBack_oid));
    
    /*
     * Add any objects from the trap definition
     */
    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_CONFIGURATIONROLLBACK_ENODEBID-1].data);
    snmp_varlist_add_variable(&var_list,
        enodebId_oid, OID_LENGTH(enodebId_oid),
        ASN_UNSIGNED,
        &uiVal,
        notiMsg->notiTlvInfo[COL_CONFIGURATIONROLLBACK_ENODEBID-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_CONFIGURATIONROLLBACK_NOTIFICATIONSEQUENCENUMBER-1].data);
    snmp_varlist_add_variable(&var_list,
        notificationSequenceNumber_oid, OID_LENGTH(notificationSequenceNumber_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_CONFIGURATIONROLLBACK_NOTIFICATIONSEQUENCENUMBER-1].len);

    snmp_varlist_add_variable(&var_list,
        dateAndTimeStamp_oid, OID_LENGTH(dateAndTimeStamp_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_CONFIGURATIONROLLBACK_DATEANDTIMESTAMP-1].data,
        notiMsg->notiTlvInfo[COL_CONFIGURATIONROLLBACK_DATEANDTIMESTAMP-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_CONFIGURATIONROLLBACK_OAMIFTYPE-1].data);
    snmp_varlist_add_variable(&var_list,
        oamIf_oid, OID_LENGTH(oamIf_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_CONFIGURATIONROLLBACK_OAMIFTYPE-1].len);

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    send_v2trap( var_list );
    snmp_free_varbind( var_list );

    return SNMP_ERR_NOERROR;
}


int
send_enbOperationalStateChanged_trap( NotiObj *notiMsg )
{
    netsnmp_variable_list  *var_list = NULL;
    const oid enbOperationalStateChanged_oid[] = { 1,3,6,1,4,1,9344,501,501,1,18 };
    const oid enodebId_oid[] = { 1,3,6,1,4,1,9344,501,106,1,1,2,1 };
    const oid notificationSequenceNumber_oid[] = { 1,3,6,1,4,1,9344,501,600,7, 0 };
    const oid dateAndTimeStamp_oid[] = { 1,3,6,1,4,1,9344,501,600,2, 0 };
    const oid operationalState_oid[] = { 1,3,6,1,4,1,9344,501,106,1,1,7,1 };
    unsigned int uiVal;

    logInfo("Sending Operational State Change Notification ID = %d ", notiMsg->notiId);
    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
        &snmptrap_oid, snmptrap_oid_len,
        ASN_OBJECT_ID,
        enbOperationalStateChanged_oid, sizeof(enbOperationalStateChanged_oid));
    
    /*
     * Add any objects from the trap definition
     */
    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_ENBOPERATIONALSTATECHANGED_ENODEBID-1].data);
    snmp_varlist_add_variable(&var_list,
        enodebId_oid, OID_LENGTH(enodebId_oid),
        ASN_UNSIGNED,
        &uiVal,
        notiMsg->notiTlvInfo[COL_ENBOPERATIONALSTATECHANGED_ENODEBID-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_ENBOPERATIONALSTATECHANGED_NOTIFICATIONSEQUENCENUMBER-1].data);
    snmp_varlist_add_variable(&var_list,
        notificationSequenceNumber_oid, OID_LENGTH(notificationSequenceNumber_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_ENBOPERATIONALSTATECHANGED_NOTIFICATIONSEQUENCENUMBER-1].len);

    snmp_varlist_add_variable(&var_list,
        dateAndTimeStamp_oid, OID_LENGTH(dateAndTimeStamp_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_ENBOPERATIONALSTATECHANGED_DATEANDTIMESTAMP-1].data,
        notiMsg->notiTlvInfo[COL_ENBOPERATIONALSTATECHANGED_DATEANDTIMESTAMP-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_ENBOPERATIONALSTATECHANGED_OPERATIONALSTATE-1].data);
    snmp_varlist_add_variable(&var_list,
        operationalState_oid, OID_LENGTH(operationalState_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_ENBOPERATIONALSTATECHANGED_OPERATIONALSTATE-1].len);

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    send_v2trap( var_list );
    snmp_free_varbind( var_list );

    return SNMP_ERR_NOERROR;
}


int
send_enbAdminStateChanged_trap( NotiObj *notiMsg )
{
    netsnmp_variable_list  *var_list = NULL;
    const oid enbAdminStateChanged_oid[] = { 1,3,6,1,4,1,9344,501,501,1,19 };
    const oid enodebId_oid[] = { 1,3,6,1,4,1,9344,501,106,1,1,2,1 };
    const oid notificationSequenceNumber_oid[] = { 1,3,6,1,4,1,9344,501,600,7, 0 };
    const oid dateAndTimeStamp_oid[] = { 1,3,6,1,4,1,9344,501,600,2, 0 };
    const oid adminState_oid[] = { 1,3,6,1,4,1,9344,501,106,1,1,6,1 };
    unsigned int uiVal;

    logInfo("Sending Admin State Change Notification ID = %d ", notiMsg->notiId);
    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
        &snmptrap_oid, snmptrap_oid_len,
        ASN_OBJECT_ID,
        enbAdminStateChanged_oid, sizeof(enbAdminStateChanged_oid));
    
    /*
     * Add any objects from the trap definition
     */
    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_ENBADMINSTATECHANGED_ENODEBID-1].data);
    snmp_varlist_add_variable(&var_list,
        enodebId_oid, OID_LENGTH(enodebId_oid),
        ASN_UNSIGNED,
        &uiVal,
        notiMsg->notiTlvInfo[COL_ENBADMINSTATECHANGED_ENODEBID-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_ENBADMINSTATECHANGED_NOTIFICATIONSEQUENCENUMBER-1].data);
    snmp_varlist_add_variable(&var_list,
        notificationSequenceNumber_oid, OID_LENGTH(notificationSequenceNumber_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_ENBADMINSTATECHANGED_NOTIFICATIONSEQUENCENUMBER-1].len);

    snmp_varlist_add_variable(&var_list,
        dateAndTimeStamp_oid, OID_LENGTH(dateAndTimeStamp_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_ENBADMINSTATECHANGED_DATEANDTIMESTAMP-1].data,
        notiMsg->notiTlvInfo[COL_ENBADMINSTATECHANGED_DATEANDTIMESTAMP-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_ENBADMINSTATECHANGED_ADMINSTATE-1].data);
    snmp_varlist_add_variable(&var_list,
        adminState_oid, OID_LENGTH(adminState_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_ENBADMINSTATECHANGED_ADMINSTATE-1].len);

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    send_v2trap( var_list );
    snmp_free_varbind( var_list );

    return SNMP_ERR_NOERROR;
}


int
send_fileDownloadCompleted_trap( NotiObj *notiMsg )
{
    netsnmp_variable_list  *var_list = NULL;
    const oid fileDownloadCompleted_oid[] = { 1,3,6,1,4,1,9344,501,501,1,4 };
    const oid enodebId_oid[] = { 1,3,6,1,4,1,9344,501,106,1,1,2,1 };
    const oid notificationSequenceNumber_oid[] = { 1,3,6,1,4,1,9344,501,600,7, 0 };
    const oid dateAndTimeStamp_oid[] = { 1,3,6,1,4,1,9344,501,600,2, 0 };
    const oid fileName_oid[] = { 1,3,6,1,4,1,9344,501,5,1,1,2,1 };
    unsigned int uiVal;

    logInfo("Sending File Download Complete Notification ID = %d ", notiMsg->notiId);
    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
        &snmptrap_oid, snmptrap_oid_len,
        ASN_OBJECT_ID,
        fileDownloadCompleted_oid, sizeof(fileDownloadCompleted_oid));
    
    /*
     * Add any objects from the trap definition
     */
    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_FILEDOWNLOADCOMPLETED_ENODEBID-1].data);
    snmp_varlist_add_variable(&var_list,
        enodebId_oid, OID_LENGTH(enodebId_oid),
        ASN_UNSIGNED,
        &uiVal,
        notiMsg->notiTlvInfo[COL_FILEDOWNLOADCOMPLETED_ENODEBID-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_FILEUPLOADCOMPLETED_NOTIFICATIONSEQUENCENUMBER-1].data);
    snmp_varlist_add_variable(&var_list,
        notificationSequenceNumber_oid, OID_LENGTH(notificationSequenceNumber_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_FILEUPLOADCOMPLETED_NOTIFICATIONSEQUENCENUMBER-1].len);

    snmp_varlist_add_variable(&var_list,
        dateAndTimeStamp_oid, OID_LENGTH(dateAndTimeStamp_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_FILEDOWNLOADCOMPLETED_DATEANDTIMESTAMP-1].data,
        notiMsg->notiTlvInfo[COL_FILEDOWNLOADCOMPLETED_DATEANDTIMESTAMP-1].len);

    snmp_varlist_add_variable(&var_list,
        fileName_oid, OID_LENGTH(fileName_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_FILEDOWNLOADCOMPLETED_FILENAME-1].data,
        notiMsg->notiTlvInfo[COL_FILEDOWNLOADCOMPLETED_FILENAME-1].len);

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    send_v2trap( var_list );
    snmp_free_varbind( var_list );

    return SNMP_ERR_NOERROR;
}


int
send_fileDownloadFailed_trap( NotiObj *notiMsg )
{
    netsnmp_variable_list  *var_list = NULL;
    const oid fileDownloadFailed_oid[] = { 1,3,6,1,4,1,9344,501,501,1,5 };
    const oid enodebId_oid[] = { 1,3,6,1,4,1,9344,501,106,1,1,2,1 };
    const oid notificationSequenceNumber_oid[] = { 1,3,6,1,4,1,9344,501,600,7, 0 };
    const oid dateAndTimeStamp_oid[] = { 1,3,6,1,4,1,9344,501,600,2, 0 };
    const oid fileName_oid[] = { 1,3,6,1,4,1,9344,501,5,1,1,2,1 };
    const oid errorInfo_oid[] = { 1,3,6,1,4,1,9344,501,600,4, 0 };
    unsigned int uiVal;

    logInfo("Sending File Download Failed Notification ID = %d ", notiMsg->notiId);
    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
        &snmptrap_oid, snmptrap_oid_len,
        ASN_OBJECT_ID,
        fileDownloadFailed_oid, sizeof(fileDownloadFailed_oid));
    
    /*
     * Add any objects from the trap definition
     */
    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_FILEDOWNLOADFAILED_ENODEBID-1].data);
    snmp_varlist_add_variable(&var_list,
        enodebId_oid, OID_LENGTH(enodebId_oid),
        ASN_UNSIGNED,
        &uiVal,
        notiMsg->notiTlvInfo[COL_FILEDOWNLOADFAILED_ENODEBID-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_FILEDOWNLOADFAILED_NOTIFICATIONSEQUENCENUMBER-1].data);
    snmp_varlist_add_variable(&var_list,
        notificationSequenceNumber_oid, OID_LENGTH(notificationSequenceNumber_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_FILEDOWNLOADFAILED_NOTIFICATIONSEQUENCENUMBER-1].len);

    snmp_varlist_add_variable(&var_list,
        dateAndTimeStamp_oid, OID_LENGTH(dateAndTimeStamp_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_FILEDOWNLOADFAILED_DATEANDTIMESTAMP-1].data,
        notiMsg->notiTlvInfo[COL_FILEDOWNLOADFAILED_DATEANDTIMESTAMP-1].len);

    snmp_varlist_add_variable(&var_list,
        fileName_oid, OID_LENGTH(fileName_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_FILEDOWNLOADFAILED_FILENAME-1].data,
        notiMsg->notiTlvInfo[COL_FILEDOWNLOADFAILED_FILENAME-1].len);

    snmp_varlist_add_variable(&var_list,
        errorInfo_oid, OID_LENGTH(errorInfo_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_FILEDOWNLOADFAILED_ERRORINFO-1].data,
        notiMsg->notiTlvInfo[COL_FILEDOWNLOADFAILED_ERRORINFO-1].len);

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    send_v2trap( var_list );
    snmp_free_varbind( var_list );

    return SNMP_ERR_NOERROR;
}


int
send_enbRegistrationReq_trap( NotiObj *notiMsg )
{
    netsnmp_variable_list  *var_list = NULL;
    const oid enbRegistrationReq_oid[] = { 1,3,6,1,4,1,9344,501,501,1,17 };
    const oid enodebId_oid[] = { 1,3,6,1,4,1,9344,501,52,1,1,1,1 };
    const oid notificationSequenceNumber_oid[] = { 1,3,6,1,4,1,9344,501,600,7, 0 };
    const oid dateAndTimeStamp_oid[] = { 1,3,6,1,4,1,9344,501,600,2, 0 };
    const oid productId_oid[] = { 1,3,6,1,4,1,9344,501,600,6, 0 };
    const oid longitude_oid[] = { 1,3,6,1,4,1,9344,501,126,1,1,4,1 };
    const oid latitude_oid[] = { 1,3,6,1,4,1,9344,501,126,1,1,3,1 };
    unsigned int uiVal;

    logInfo("Sending EMS Registration Notification ID = %d ", notiMsg->notiId);
    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
        &snmptrap_oid, snmptrap_oid_len,
        ASN_OBJECT_ID,
        enbRegistrationReq_oid, sizeof(enbRegistrationReq_oid));

    /*
     * Add any objects from the trap definition
     */
    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_ENBREGISTRATIONREQ_ENODEBID-1].data);
    snmp_varlist_add_variable(&var_list,
        enodebId_oid, OID_LENGTH(enodebId_oid),
        ASN_UNSIGNED,
        &uiVal,
        notiMsg->notiTlvInfo[COL_ENBREGISTRATIONREQ_ENODEBID-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_ENBREGISTRATIONREQ_NOTIFICATIONSEQUENCENUMBER-1].data);
    snmp_varlist_add_variable(&var_list,
        notificationSequenceNumber_oid, OID_LENGTH(notificationSequenceNumber_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_ENBREGISTRATIONREQ_NOTIFICATIONSEQUENCENUMBER-1].len);

    snmp_varlist_add_variable(&var_list,
        dateAndTimeStamp_oid, OID_LENGTH(dateAndTimeStamp_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_ENBREGISTRATIONREQ_DATEANDTIMESTAMP-1].data,
        notiMsg->notiTlvInfo[COL_ENBREGISTRATIONREQ_DATEANDTIMESTAMP-1].len);

    snmp_varlist_add_variable(&var_list,
        productId_oid, OID_LENGTH(productId_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_ENBREGISTRATIONREQ_PRODUCTID-1].data,
        notiMsg->notiTlvInfo[COL_ENBREGISTRATIONREQ_PRODUCTID-1].len);

    snmp_varlist_add_variable(&var_list,
        longitude_oid, OID_LENGTH(longitude_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_ENBREGISTRATIONREQ_LONGITUDE-1].data,
        notiMsg->notiTlvInfo[COL_ENBREGISTRATIONREQ_LONGITUDE-1].len);

    snmp_varlist_add_variable(&var_list,
        latitude_oid, OID_LENGTH(latitude_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_ENBREGISTRATIONREQ_LATITUDE-1].data,
        notiMsg->notiTlvInfo[COL_ENBREGISTRATIONREQ_LATITUDE-1].len);

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    send_v2trap( var_list );
    snmp_free_varbind( var_list );

    return SNMP_ERR_NOERROR;
}

int
send_enbLocationChanged_trap( NotiObj *notiMsg )
{
    netsnmp_variable_list  *var_list = NULL;
    const oid enbLocationChanged_oid[] = { 1,3,6,1,4,1,9344,501,501,1,20 };
    const oid enodebId_oid[] = { 1,3,6,1,4,1,9344,501,52,1,1,1,1 };
    const oid notificationSequenceNumber_oid[] = { 1,3,6,1,4,1,9344,501,600,7, 0 };
    const oid dateAndTimeStamp_oid[] = { 1,3,6,1,4,1,9344,501,600,2, 0 };
    const oid longitude_oid[] = { 1,3,6,1,4,1,9344,501,126,1,1,4,1 };
    const oid latitude_oid[] = { 1,3,6,1,4,1,9344,501,126,1,1,3,1 };
    unsigned int uiVal;

    logInfo("Sending Location Changed Notification ID = %d ", notiMsg->notiId);
    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
        &snmptrap_oid, snmptrap_oid_len,
        ASN_OBJECT_ID,
        enbLocationChanged_oid, sizeof(enbLocationChanged_oid));

    /*
     * Add any objects from the trap definition
     */
    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_ENBLOCATIONCHANGED_ENODEBID-1].data);
    snmp_varlist_add_variable(&var_list,
        enodebId_oid, OID_LENGTH(enodebId_oid),
        ASN_UNSIGNED,
        &uiVal,
        notiMsg->notiTlvInfo[COL_ENBLOCATIONCHANGED_ENODEBID-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_ENBLOCATIONCHANGED_NOTIFICATIONSEQUENCENUMBER-1].data);
    snmp_varlist_add_variable(&var_list,
        notificationSequenceNumber_oid, OID_LENGTH(notificationSequenceNumber_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_ENBLOCATIONCHANGED_NOTIFICATIONSEQUENCENUMBER-1].len);

    snmp_varlist_add_variable(&var_list,
        dateAndTimeStamp_oid, OID_LENGTH(dateAndTimeStamp_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_ENBLOCATIONCHANGED_DATEANDTIMESTAMP-1].data,
        notiMsg->notiTlvInfo[COL_ENBLOCATIONCHANGED_DATEANDTIMESTAMP-1].len);

    snmp_varlist_add_variable(&var_list,
        longitude_oid, OID_LENGTH(longitude_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_ENBLOCATIONCHANGED_LONGITUDE-1].data,
        notiMsg->notiTlvInfo[COL_ENBLOCATIONCHANGED_LONGITUDE-1].len);

    snmp_varlist_add_variable(&var_list,
        latitude_oid, OID_LENGTH(latitude_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_ENBLOCATIONCHANGED_LATITUDE-1].data,
        notiMsg->notiTlvInfo[COL_ENBLOCATIONCHANGED_LATITUDE-1].len);

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    send_v2trap( var_list );
    snmp_free_varbind( var_list );

    return SNMP_ERR_NOERROR;
}

int
send_enbNoNeighborConfigured_trap( NotiObj *notiMsg )
{
    netsnmp_variable_list  *var_list = NULL;
    const oid enbLocationChanged_oid[] = { 1,3,6,1,4,1,9344,501,501,1,21 };
    const oid enodebId_oid[] = { 1,3,6,1,4,1,9344,501,52,1,1,1,1 };
    const oid notificationSequenceNumber_oid[] = { 1,3,6,1,4,1,9344,501,600,7, 0 };
    const oid dateAndTimeStamp_oid[] = { 1,3,6,1,4,1,9344,501,600,2, 0 };
    unsigned int uiVal;

    logInfo("Sending Location Changed Notification ID = %d ", notiMsg->notiId);
    /*
     * Set the snmpTrapOid.0 value
     */
    snmp_varlist_add_variable(&var_list,
        &snmptrap_oid, snmptrap_oid_len,
        ASN_OBJECT_ID,
        enbLocationChanged_oid, sizeof(enbLocationChanged_oid));

    /*
     * Add any objects from the trap definition
     */
    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_NONEIGHBORCONFIGURED_ENODEBID-1].data);
    snmp_varlist_add_variable(&var_list,
        enodebId_oid, OID_LENGTH(enodebId_oid),
        ASN_UNSIGNED,
        &uiVal,
        notiMsg->notiTlvInfo[COL_NONEIGHBORCONFIGURED_ENODEBID-1].len);

    uiVal = getUint32FromArray(notiMsg->notiTlvInfo[COL_NONEIGHBORCONFIGURED_NOTIFICATIONSEQUENCENUMBER-1].data);
    snmp_varlist_add_variable(&var_list,
        notificationSequenceNumber_oid, OID_LENGTH(notificationSequenceNumber_oid),
        ASN_INTEGER,
        &uiVal,
        notiMsg->notiTlvInfo[COL_NONEIGHBORCONFIGURED_NOTIFICATIONSEQUENCENUMBER-1].len);

    snmp_varlist_add_variable(&var_list,
        dateAndTimeStamp_oid, OID_LENGTH(dateAndTimeStamp_oid),
        ASN_OCTET_STR,
        notiMsg->notiTlvInfo[COL_NONEIGHBORCONFIGURED_DATEANDTIMESTAMP-1].data,
        notiMsg->notiTlvInfo[COL_NONEIGHBORCONFIGURED_DATEANDTIMESTAMP-1].len);

    /*
     * Send the trap to the list of configured destinations
     *  and clean up
     */
    send_v2trap( var_list );
    snmp_free_varbind( var_list );

    return SNMP_ERR_NOERROR;
}
