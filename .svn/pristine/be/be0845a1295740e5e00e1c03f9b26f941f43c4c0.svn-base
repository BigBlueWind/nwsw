/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.iterate.conf 19302 2010-08-13 12:19:42Z dts12 $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

#include "bs_modules.h"
#include "all_cfg.h"
#include "all_cmn.h"
#include "tlv_enc_dec.h"

#include "sih.h"
#include "syslog.h"

#include "eventThresholds.h"

Netsnmp_Node_Handler eventThresholdsTable_handler;
Netsnmp_First_Data_Point  eventThresholdsTable_get_first_data_point;
Netsnmp_Next_Data_Point   eventThresholdsTable_get_next_data_point;

struct eventThresholdsTable_entry  *eventThresholdsTable_head = NULL;
static TBOOL g_sihEventThresholdsSetReqProcessed = FALSE;
static TBOOL g_sihEventThresholdsGetReqProcessed = FALSE;
static UINT32 g_prevEventThresholdsReqCount = 0;
static UINT32 g_eventThresholdsFirstCall = 0;

/* free_eventThresholdsTable */
/**
* @details 
*          This is the routine which frees the enodeb config entry. 
*/
void free_eventThresholdsTable(void)
{
  eventThresholdsTableEntry  * current = eventThresholdsTable_head;

  if (current) 
  {
  for (current = eventThresholdsTable_head->next ; current != NULL; current = current->next) {
    SNMP_FREE( current );  
    }
   
  SNMP_FREE(eventThresholdsTable_head);
  eventThresholdsTable_head = NULL;
  }
  return;
}


/**
* @details 
*          This is the routine which handles get response from SIH Get Processor
*          and prepare the SNMP GET response for EMS. 
* @param tlvArray contains pointer to TLV array.     
*/
TBOOL sendEventThresholdsSnmpGetResponse (
  IO TlvArray    *tlvArray
  )
{
  int  totalNumRow, totalNumCol, i=0, colmn=0;
  eventThresholdsTableEntry * prevPtr = NULL;

  printTLV(tlvArray);

  /* Total no. of Colmns */
  totalNumCol = EVENT_THRESHOLDS_MAX_COL;
  /* Total no. of Row = (No. of TLV)/(No. of Columns) */
  totalNumRow = tlvArray->numTlvs/totalNumCol;

  for (i=1;  i <= totalNumRow;  i++) 
      {
      eventThresholdsTableEntry *ptr=(eventThresholdsTableEntry *)malloc(sizeof(eventThresholdsTableEntry));

      clearBytes(ptr,sizeof(eventThresholdsTableEntry));

      /* Fill Data in TLV */
      for(colmn = 1 ; colmn <= totalNumCol ; colmn++)
        {
       if (colmn EQ COLUMN_INDEX)
           {
            ptr->index = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }            
       if (colmn EQ COLUMN_CPUUSAGEHIGH)
           {
            ptr->cpuUsageHigh = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }        
       if (colmn EQ COLUMN_CPUUSAGENORMAL)
           {
            ptr->cpuUsageNormal = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }        
       if (colmn EQ COLUMN_MEMUSAGEHIGH)
           {
            ptr->memUsageHigh = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }        
        if (colmn EQ COLUMN_MEMUSAGENORMAL)
           {
            ptr->memUsageNormal = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_ENBLOADHIGHMBPS)
           {
            ptr->enbLoadHighMbps = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }        
        if (colmn EQ COLUMN_ENBLOADNORMALMBPS)
           {
            ptr->enbLoadNormalMbps = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       }

       ptr->next = NULL;

      if (prevPtr == NULL) {
           eventThresholdsTable_head =  prevPtr = ptr;
       }

      prevPtr->next = ptr;
      prevPtr = ptr;
     }
    prevPtr->next = NULL;

    if (eventThresholdsTable_head)
        return TRUE;
    else
        return FALSE;
}

/**
* @details 
*          This routine sends enodeb config set request to BSM, it uses SIH Set 
*          Processor to create and send the message to BSM. 
* @param sihTagInfo is used to have the tag information for set request.
*/
TBOOL sendEventThresholdsSnmpSetRequest ( 
      IO TagInfo  sihTagInfo,
      IO TlvArray *tlvArray
      )
{
   eventThresholdsTableEntry * setReqData = NULL;   
   TBOOL status = FALSE;
   int colmn = 0;
   unsigned char * ipAddr;
   struct in_addr ip;
    
   setReqData = eventThresholdsTable_head;

   /* Fill Data in TLV */
   for(colmn = 0; colmn < tlvArray->numTlvs; colmn++)
      {
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_INDEX)
         {
           putUint32InArray( setReqData->index, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->index);     
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_CPUUSAGEHIGH)
         {
           putUint32InArray( setReqData->cpuUsageHigh, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->cpuUsageHigh);     
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_CPUUSAGENORMAL)
         {
           putUint32InArray( setReqData->cpuUsageNormal, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->cpuUsageNormal);   
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_MEMUSAGEHIGH)
         {
           putUint32InArray( setReqData->memUsageHigh, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->memUsageHigh); 
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_MEMUSAGENORMAL)
         {
           putUint32InArray( setReqData->memUsageNormal, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->memUsageNormal); 
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_ENBLOADHIGHMBPS)
         {
           putUint32InArray( setReqData->enbLoadHighMbps, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->enbLoadHighMbps); 
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_ENBLOADNORMALMBPS)
         {
           putUint32InArray( setReqData->enbLoadNormalMbps, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->enbLoadNormalMbps); 
         }
       }

   /* Invoke SIH Set Processor */
   status = sihSetProcessor (sihTagInfo,  tlvArray);
   if (status EQ TRUE)
     {
      g_sihEventThresholdsSetReqProcessed = TRUE;
      g_sihEventThresholdsGetReqProcessed = FALSE;
      /* free the resources */      
      free_eventThresholdsTable(); 
     }
   return status;
}


/**
* @details 
*          This is the routine for initializing eventThresholds module.
*/
void
init_eventThresholds(void)
{
  /* here we initialize all the tables we're planning on supporting */
    initialize_table_eventThresholdsTable();
}

/* Determine the first/last column names

 Initialize the eventThresholdsTable table by defining its contents and how it's structured */
void
initialize_table_eventThresholdsTable(void)
{
    const oid eventThresholdsTable_oid[] = {1,3,6,1,4,1,9344,501,EVENTTHRESHOLDS,1};
    const size_t eventThresholdsTable_oid_len   = OID_LENGTH(eventThresholdsTable_oid);
    netsnmp_handler_registration    *reg;
    netsnmp_iterator_info           *iinfo;
    netsnmp_table_registration_info *table_info;

    DEBUGMSGTL(("eventThresholds:init", "initializing table eventThresholdsTable\n"));

    reg = netsnmp_create_handler_registration(
              "eventThresholdsTable",     eventThresholdsTable_handler,
              eventThresholdsTable_oid, eventThresholdsTable_oid_len,
              HANDLER_CAN_RWRITE
              );

    table_info = SNMP_MALLOC_TYPEDEF( netsnmp_table_registration_info );
    netsnmp_table_helper_add_indexes(table_info,
                           ASN_UNSIGNED,  /* index: cpuUsageHigh */
                           0);
    table_info->min_column = COLUMN_INDEX;
    table_info->max_column = EVENT_THRESHOLDS_MAX_COL;
    
    iinfo = SNMP_MALLOC_TYPEDEF( netsnmp_iterator_info );
    iinfo->get_first_data_point = eventThresholdsTable_get_first_data_point;
    iinfo->get_next_data_point  = eventThresholdsTable_get_next_data_point;
    iinfo->table_reginfo        = table_info;
    
    netsnmp_register_table_iterator( reg, iinfo );

    /* Initialise the contents of the table here */
}

 #ifndef PWAV_SIH 
/* create a new row in the (unsorted) table */
struct eventThresholdsTable_entry *
eventThresholdsTable_createEntry(
                 u_long  cpuUsageHigh,
                ) {
    struct eventThresholdsTable_entry *entry;

    entry = SNMP_MALLOC_TYPEDEF(struct eventThresholdsTable_entry);
    if (!entry)
        return NULL;

    entry->cpuUsageHigh = cpuUsageHigh;
    entry->next = eventThresholdsTable_head;
    eventThresholdsTable_head = entry;
    return entry;
}

/* remove a row from the table */
void
eventThresholdsTable_removeEntry( struct eventThresholdsTable_entry *entry ) {
    struct eventThresholdsTable_entry *ptr, *prev;

    if (!entry)
        return;    /* Nothing to remove */

    for ( ptr  = eventThresholdsTable_head, prev = NULL;
          ptr != NULL;
          prev = ptr, ptr = ptr->next ) {
        if ( ptr == entry )
            break;
    }
    if ( !ptr )
        return;    /* Can't find it */

    if ( prev == NULL )
        eventThresholdsTable_head = ptr->next;
    else
        prev->next = ptr->next;

    SNMP_FREE( entry );   /* XXX - release any other internal resources */
}
#endif /* PWAV_SIH */


/* Example iterator hook routines - using 'get_next' to do most of the work */
netsnmp_variable_list *
eventThresholdsTable_get_first_data_point(void **my_loop_context,
                          void **my_data_context,
                          netsnmp_variable_list *put_index_data,
                          netsnmp_iterator_info *mydata)
{
  TagInfo sihTagInfo;
    TBOOL status = FALSE;

    if (g_sihEventThresholdsGetReqProcessed EQ FALSE)
        {
        /* Set SIH Get Request Tag Info */
        sihTagInfo.tableId = EVENTTHRESHOLDS;
        sihTagInfo.rowId = CONFIG_ROW_ID_NONE; 
        sihTagInfo.colId = CONFIG_COL_ID_NONE;                

        status = sihGetProcessor (sihTagInfo);
        if ( status EQ TRUE )
            {
            logInfo("%s","Get Processor Succedded");
            if (eventThresholdsTable_head)
                {
		g_eventThresholdsFirstCall = 1;
                g_sihEventThresholdsGetReqProcessed = TRUE;
                }
            }
        else
            logError("%s","Get Processor Failed");
        }        
    
    *my_loop_context = eventThresholdsTable_head;
    return eventThresholdsTable_get_next_data_point(my_loop_context, my_data_context,
                                    put_index_data,  mydata );
}

netsnmp_variable_list *
eventThresholdsTable_get_next_data_point(void **my_loop_context,
                          void **my_data_context,
                          netsnmp_variable_list *put_index_data,
                          netsnmp_iterator_info *mydata)
{
    struct eventThresholdsTable_entry *entry = (struct eventThresholdsTable_entry *)*my_loop_context;
    netsnmp_variable_list *idx = put_index_data;

    if ( entry ) {
        snmp_set_var_typed_integer( idx, ASN_UNSIGNED, entry->index );
        idx = idx->next_variable;
        *my_data_context = (void *)entry;
        *my_loop_context = (void *)entry->next;
        return put_index_data;
    } else {
        return NULL;
    }
}


/** handles requests for the eventThresholdsTable table */
int
eventThresholdsTable_handler(
    netsnmp_mib_handler               *handler,
    netsnmp_handler_registration      *reginfo,
    netsnmp_agent_request_info        *reqinfo,
    netsnmp_request_info              *requests) {

    netsnmp_request_info       *request = NULL;
    netsnmp_table_request_info *table_info = NULL;
    struct eventThresholdsTable_entry          *table_entry = NULL;
    int loopCount = 0;
    int ret;
    TagInfo sihTagInfo;
    TlvArray tlvArray;
    int rowIndex = 0, colId = 0;
    TBOOL status = FALSE;  

    DEBUGMSGTL(("eventThresholds:handler", "Processing request (%d)\n", reqinfo->mode));

    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
    case MODE_GET:
        for (request=requests; request; request=request->next) {

            loopCount++;
            if (request->processed != 0)
            {
	     g_prevEventThresholdsReqCount = 0;
             g_sihEventThresholdsGetReqProcessed = FALSE;

             /* free the resources */
             free_eventThresholdsTable(); 
             /* Here loopCount is decremented, Due to calling of free function two times in SNMP-GETNEXT
              * on single parameter -- 20/07/11 */
             loopCount--;
             continue;
            }

            /* perform anything here that you need to do before each
               request is processed. */           

            /* the following extracts the my_data_context pointer set in
               the loop functions above.  You can then use the results to
               help return data for the columns of the eventThresholdsTable table 
               in question */    

            table_entry = (struct eventThresholdsTable_entry *)
                              netsnmp_extract_iterator_context(request);

            if ( table_entry == NULL) {
                if (reqinfo->mode == MODE_GET) {
                    netsnmp_set_request_error(reqinfo, request,SNMP_NOSUCHINSTANCE);
                    continue;
                }
                /* XXX: no row existed, if you support creation and this is a
                   set, start dealing with it here, else continue */
            }

            table_info  =     netsnmp_extract_table_info(      request);

            /* table_info->colnum contains the column number requested */
            /* table_info->indexes contains a linked list of snmp variable
               bindings for the indexes of the table.  Values in the list
               have been set corresponding to the indexes of the
               request */
            if (table_info==NULL) {
                continue;
            }             

            switch (table_info->colnum) {
            case COLUMN_INDEX:
               if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->index);
                break;

            case COLUMN_CPUUSAGEHIGH:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->cpuUsageHigh);
                break;
            case COLUMN_CPUUSAGENORMAL:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->cpuUsageNormal);
                break;
            case COLUMN_MEMUSAGEHIGH:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->memUsageHigh);
                break;
            case COLUMN_MEMUSAGENORMAL:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->memUsageNormal);
                break;
            case COLUMN_ENBLOADHIGHMBPS:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->enbLoadHighMbps);
                break;
            case COLUMN_ENBLOADNORMALMBPS:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->enbLoadNormalMbps);
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
        if(g_eventThresholdsFirstCall EQ 1)
         {
            g_eventThresholdsFirstCall = 0;
            g_prevEventThresholdsReqCount = loopCount;
            // This will occur in case of, when SNMP-GET or SNMP-GETNEXT of Single Parameter occurred.
            // In the first call itself loopCount becomes one.
            // In General Case, the loopCount will be always > 1 because every table contains 
            // index column to fetch the row and remaining columns contain table attributes.
            if(loopCount EQ 1)
            {
               //Setting it to false in case of SNMP-GET request for single parameter.
               g_sihEventThresholdsGetReqProcessed = FALSE;
               // Free all resources.
               free_eventThresholdsTable();
            }
         }
         else if(loopCount > 1 || g_prevEventThresholdsReqCount > 1)
         {
            //update g_prevReqCount with current loopCount for next call of Table_handler
            g_prevEventThresholdsReqCount = loopCount;
         }
         else if(loopCount EQ 1)
         {
            //Setting it to false in case of SNMP-GET request for single parameter.
            g_sihEventThresholdsGetReqProcessed = FALSE;
            // Free all resources.
            free_eventThresholdsTable();
         }
        break;

        /*
         * Write-support
         */
    case MODE_SET_RESERVE1:
#ifndef PWAV_SIH     
        for (request=requests; request; request=request->next) {
            table_entry = (struct eventThresholdsTable_entry *)
                              netsnmp_extract_iterator_context(request);
            table_info  =     netsnmp_extract_table_info(      request);
    
            switch (table_info->colnum) {
            case COLUMN_CPUUSAGEHIGH:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_CPUUSAGENORMAL:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_MEMUSAGEHIGH:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_MEMUSAGENORMAL:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            default:
                netsnmp_set_request_error( reqinfo, request,
                                           SNMP_ERR_NOTWRITABLE );
                return SNMP_ERR_NOERROR;
            }
        }
#endif /* PWAV_SIH */            
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        g_sihEventThresholdsSetReqProcessed = FALSE; 

        clearBytes(&sihTagInfo, sizeof(TagInfo));
        clearBytes(&tlvArray, sizeof(TlvArray));
        
        for (request=requests; request; request=request->next) {
            table_entry = (struct eventThresholdsTable_entry *)
                              netsnmp_extract_iterator_context(request);
            table_info  =     netsnmp_extract_table_info(      request);

            if(table_entry == NULL){
                logInfo(" %s\n", "table_entry is NULL");
                if (reqinfo->mode == MODE_SET_ACTION) {
                    netsnmp_set_request_error(reqinfo, request,SNMP_NOSUCHINSTANCE);
                    continue;
                }
                /* XXX: no row existed, if you support creation and this is a
                   set, start dealing with it here, else continue */
            }

            if(table_info == NULL){
                logInfo(" %s\n", "table_info is NULL");
                continue;
            }

            colId = table_info->colnum;
            /* set the row index */
            rowIndex = requests->index;
    
            switch (table_info->colnum) {
            case COLUMN_INDEX:
                table_entry->index     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, EVENTTHRESHOLDS, rowIndex, COLUMN_INDEX);
                tlvArray.numTlvs++;
                break;
            case COLUMN_CPUUSAGEHIGH:
                table_entry->cpuUsageHigh     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, EVENTTHRESHOLDS, rowIndex, COLUMN_CPUUSAGEHIGH);
                tlvArray.numTlvs++;
                break;
            case COLUMN_CPUUSAGENORMAL:
                table_entry->cpuUsageNormal     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, EVENTTHRESHOLDS, rowIndex, COLUMN_CPUUSAGENORMAL);
                tlvArray.numTlvs++;
                break;
            case COLUMN_MEMUSAGEHIGH:
                table_entry->memUsageHigh     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, EVENTTHRESHOLDS, rowIndex, COLUMN_MEMUSAGEHIGH);
                tlvArray.numTlvs++;
                break;
            case COLUMN_MEMUSAGENORMAL:
                table_entry->memUsageNormal     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, EVENTTHRESHOLDS, rowIndex, COLUMN_MEMUSAGENORMAL);
                tlvArray.numTlvs++;
                break;
            case COLUMN_ENBLOADHIGHMBPS:
                table_entry->enbLoadHighMbps     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, EVENTTHRESHOLDS, rowIndex, COLUMN_ENBLOADHIGHMBPS);
                tlvArray.numTlvs++;
                break;
            case COLUMN_ENBLOADNORMALMBPS:
                table_entry->enbLoadNormalMbps     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, EVENTTHRESHOLDS, rowIndex, COLUMN_ENBLOADNORMALMBPS);
                tlvArray.numTlvs++;
                break;
            }
        }

        if ((request == NULL) && (g_sihEventThresholdsSetReqProcessed EQ FALSE))
            /* Processed all requests and table entry is filled with
             * requested data. */
            {
            /* Set SIH Set Request Tag Info */
            sihTagInfo.tableId = EVENTTHRESHOLDS;

            sihTagInfo.rowId = rowIndex;

            status = sendEventThresholdsSnmpSetRequest (sihTagInfo, &tlvArray);
            if (status EQ TRUE)
            {
                logInfo("%s","SET Succedded");
            }
            else
                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_GENERR );
            }
        break;

    case MODE_SET_UNDO:
#ifndef PWAV_SIH 
        for (request=requests; request; request=request->next) {
            table_entry = (struct eventThresholdsTable_entry *)
                              netsnmp_extract_iterator_context(request);
            table_info  =     netsnmp_extract_table_info(      request);
    
            switch (table_info->colnum) {
            case COLUMN_CPUUSAGEHIGH:
                table_entry->cpuUsageHigh     = table_entry->old_cpuUsageHigh;
                table_entry->old_cpuUsageHigh = 0;
                break;
            case COLUMN_CPUUSAGENORMAL:
                table_entry->cpuUsageNormal     = table_entry->old_cpuUsageNormal;
                table_entry->old_cpuUsageNormal = 0;
                break;
            case COLUMN_MEMUSAGEHIGH:
                table_entry->memUsageHigh     = table_entry->old_memUsageHigh;
                table_entry->old_memUsageHigh = 0;
                break;
            case COLUMN_MEMUSAGENORMAL:
                table_entry->memUsageNormal     = table_entry->old_memUsageNormal;
                table_entry->old_memUsageNormal = 0;
                break;
            case COLUMN_ENBLOADHIGHMBPS:
                table_entry->enbLoadHighMbps     = table_entry->old_enbLoadHighMbps;
                table_entry->old_enbLoadHighMbps = 0;
                break;
            case COLUMN_ENBLOADNORMALMBPS:
                table_entry->enbLoadNormalMbps     = table_entry->old_enbLoadNormalMbps;
                table_entry->old_enbLoadNormalMbps = 0;
                break;
            }
        }
#endif /* PWAV_SIH */
        break;

    case MODE_SET_COMMIT:
        break;
    }
    return SNMP_ERR_NOERROR;
}
