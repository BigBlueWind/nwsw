/********************************************************************16**

                         (c) COPYRIGHT 2009 by 
                         Continuous Computing Corporation.
                         All rights reserved.

     This software is confidential and proprietary to Continuous Computing 
     Corporation (CCPU).  No part of this software may be reproduced,
     stored, transmitted, disclosed or used in any form or by any means
     other than as expressly provided by the written Software License 
     Agreement between CCPU and its licensee.

     CCPU warrants that for a period, as provided by the written
     Software License Agreement between CCPU and its licensee, this
     software will perform substantially to CCPU specifications as
     published at the time of shipment, exclusive of any updates or 
     upgrades, and the media used for delivery of this software will be 
     free from defects in materials and workmanship.  CCPU also warrants 
     that has the corporate authority to enter into and perform under the   
     Software License Agreement and it is the copyright owner of the software 
     as originally delivered to its licensee.

     CCPU MAKES NO OTHER WARRANTIES, EXPRESS OR IMPLIED, INCLUDING
     WITHOUT LIMITATION WARRANTIES OF MERCHANTABILITY OR FITNESS FOR
     A PARTICULAR PURPOSE WITH REGARD TO THIS SOFTWARE, SERVICE OR ANY RELATED
     MATERIALS.

     IN NO EVENT SHALL CCPU BE LIABLE FOR ANY INDIRECT, SPECIAL,
     CONSEQUENTIAL DAMAGES, OR PUNITIVE DAMAGES IN CONNECTION WITH OR ARISING
     OUT OF THE USE OF, OR INABILITY TO USE, THIS SOFTWARE, WHETHER BASED
     ON BREACH OF CONTRACT, TORT (INCLUDING NEGLIGENCE), PRODUCT
     LIABILITY, OR OTHERWISE, AND WHETHER OR NOT IT HAS BEEN ADVISED
     OF THE POSSIBILITY OF SUCH DAMAGE.

                       Restricted Rights Legend

     This software and all related materials licensed hereby are
     classified as "restricted computer software" as defined in clause
     52.227-19 of the Federal Acquisition Regulation ("FAR") and were
     developed entirely at private expense for nongovernmental purposes,
     are commercial in nature and have been regularly used for
     nongovernmental purposes, and, to the extent not published and
     copyrighted, are trade secrets and confidential and are provided
     with all rights reserved under the copyright laws of the United
     States.  The government's rights to the software and related
     materials are limited and restricted as provided in clause
     52.227-19 of the FAR.

                    IMPORTANT LIMITATION(S) ON USE

     The use of this software is limited to the use set
     forth in the written Software License Agreement between CCPU and
     its Licensee. Among other things, the use of this software
     may be limited to a particular type of Designated Equipment, as 
     defined in such Software License Agreement.
     Before any installation, use or transfer of this software, please
     consult the written Software License Agreement or contact CCPU at
     the location set forth below in order to confirm that you are
     engaging in a permissible use of the software.

                    Continuous Computing Corporation
                    9450, Carroll Park Drive
                    San Diego, CA-92121, USA

                    Tel: +1 (858) 882 8800
                    Fax: +1 (858) 777 3388

                    Email: support@trillium.com
                    Web: http://www.ccpu.com

*********************************************************************17*/


/**********************************************************************

     Name:     LTE-RLC Layer 
  
     Type:     C file
  
     Desc:     Source code for RLC Transparent mode assembly and
               reassembly.This file contains following functions
                
                  --kwTmmQSdu
                  --kwTmmSndToLi
                  --kwTmmRcvFrmLi
                  --kwTmmReEstablish 

     File:     gp_tmm.c

     Sid:      gp_tmm.c@@/main/2 - Fri Nov 13 14:14:01 2009

     Prg:      vp 

**********************************************************************/
/** @file gp_tmm.c
@brief RLC Transparent Mode module
*/

/*
 *      This software may be combined with the following TRILLIUM
 *      software:
 *
 *      part no.                      description
 *      --------    ----------------------------------------------
 *      1000372     LTE-MAC
 *      1000369     LTE-RRC
 */

/* header (.h) include files */
#include "envopt.h"        /* environment options */
#include "envdep.h"        /* environment dependent */
#include "envind.h"        /* environment independent */

#include "gen.h"           /* general */
#include "ssi.h"           /* system services */
#include "cm5.h"           /* common timer defines */
#include "cm_tkns.h"       /* common tokens defines */
#include "cm_mblk.h"       /* common memory allocation library defines */
#include "cm_llist.h"      /* common link list  defines  */
#include "cm_hash.h"       /* common hash list  defines */
#include "cm_lte.h"        /* common LTE defines */
#include "lkw.h"           /* LKW defines */
#include "ckw.h"           /* CKW defines */
#include "kwu.h"           /* KWU defines */
#include "rgu.h"           /* RGU defines */
#include "kw_env.h"        /* RLC environment options */
#ifdef KW_PDCP
#include "lpj.h"           /* LPJ defines */
#include "cpj.h"           /* CPJ defines */
#include "pju.h"           /* PJU defines */
#endif

#include "kw.h"            /* RLC defines */
#include "kw_err.h"            /* RLC defines */

/* extern (.x) include files */
#include "gen.x"           /* general */
#include "ssi.x"           /* system services */

#include "cm5.x"           /* common timer library */
#include "cm_tkns.x"       /* common tokens */
#include "cm_mblk.x"       /* common memory allocation */
#include "cm_llist.x"      /* common link list */
#include "cm_hash.x"       /* common hash list */
#include "cm_lte.x"        /* common LTE includes */
#include "cm_lib.x"        /* common memory allocation library */
#include "lkw.x"           /* LKW */
#include "ckw.x"           /* CKW */
#include "kwu.x"           /* KWU */
#include "rgu.x"           /* RGU */
#ifdef KW_PDCP
#include "lpj.x"           /* LPJ defines */
#include "cpj.x"           /* CPJ defines */
#include "pju.x"           /* PJU defines */
#endif

#include "kw.x"

PRIVATE S16 kwTmmSndStaRsp ARGS(( KwRbCb *rbCb, MsgLen bo, KwuDatReqInfo *datReqInfo));

/** @addtogroup tmmode */
/*@{*/

/**
 *
 * @brief 
 *
 *        Handler to queue the SDU in the SDU queue and update BO and report it to the lower layer.
 *
 * @b Description: 
 *
 *        This function is used to queue the received SDU in the 
 *        SDU queue maintained in the radio bearer control block.
 *        After queuing the SDU, BO is updated and is reported
 *        to the lower layer. 
 *            
 *  @param[in] rbCb         RB control block. 
 *  @param[in] datReqInfo   Data Request Information.
 *  @param[in] mBuf         SDU Buffer.
 *
 *  @return  S16
 *      -# ROK 
 *      -# RFAILED 
 *
 */
#ifdef ANSI
PUBLIC S16 kwTmmQSdu
(
KwRbCb *rbCb,                     /* Rb Control Block */
KwuDatReqInfo *datReqInfo,        /* Data Request Information */
Buffer *mBuf                      /* SDU buffer */
)
#else
PUBLIC S16 kwTmmQSdu(rbCb,datReqInfo,mBuf)
KwRbCb *rbCb;                     /* Rb Control Block */
KwuDatReqInfo *datReqInfo;        /* Data Request Information */
Buffer *mBuf;                     /* SDU buffer */
#endif
{
   KwSdu   *sdu;                  /* SDU */
   MsgLen len;                    /* SDU length */
#ifdef MSPD 
   extern U32 macGT;
#endif
   TRC2(kwTmmQSdu) 
#ifdef DEBUGP
   KWDBGP((KW_DBGMASK_TM | KW_DBGMASK_BRIEF | KW_DBGMASK_DL), (_kwPBuf,
           "kwTmmQSdu(rbCb, datReqInfo, mBuf)\n")); 
#endif

   KW_ALLOC(sdu,sizeof(KwSdu));
#if (ERRCLASS & ERRCLS_ADD_RES)
   if ( sdu == NULLP )
   {
      KWLOGERROR(ERRCLS_ADD_RES, EKW200, (ErrVal) RFAILED,
                       "KW_ALLOC failed for sdu.");
      RETVALUE(RFAILED);
   }
#endif /* ERRCLASS & ERRCLS_ADD_RES */
#ifdef CCPU_OPT   
   if ( rbCb->lch[0].lChType == CM_LTE_LCH_BCCH || 
        rbCb->lch[0].lChType == CM_LTE_LCH_PCCH )
   {
      sdu->mode.tm.sfn = datReqInfo->tm.tmg.sfn;
      sdu->mode.tm.subframe = datReqInfo->tm.tmg.subframe;
   }
   else
   {
      sdu->mode.tm.rnti = datReqInfo->tm.rnti;
#ifdef MSPD
      sdu->mode.tm.sduRecTime = macGT;
#endif	  
      MSPD_DBG("CRFIX: [%d]Dl Tmm PDU\n", datReqInfo->tm.rnti);  	  
   }
#endif

   SFndLenMsg(mBuf,&len); 
   sdu->mBuf = mBuf;
   sdu->sduSz   = len;   
   
   cmLListAdd2Tail(&(rbCb->m.tm.sduQ), &(sdu->lstEnt));  
   sdu->lstEnt.node = (PTR)sdu; 

   kwTmmSndStaRsp(rbCb,len,datReqInfo); 
   /* kw002.201 Removed freeing of datReq to free from correct region at caller */

   RETVALUE(ROK);

}
/**
*  @brief 
*
*         Handler to form a pdu and send it to the lower layer.
* 
*  @b Description: 
* 
*         This function forms one pdu from the first SDU in the
*         SDU queue and sends it to the lower layer.
*             
*  @param[in] rbCb RB control block. 
*
*  @return  S16
*       -# ROK 
*       -# RFAILED         
*/

#ifdef ANSI
PUBLIC S16 kwTmmSndToLi
(
KwRbCb    *rbCb,                  /* Rb Control Block */
RguCStaIndInfo *staInd
)
#else
PUBLIC S16 kwTmmSndToLi(rbCb)
KwRbCb *rbCb;                    /* Rb Control Block */
#endif
{
   CmLList *node;            /* Current Link List Node */
   KwSdu   *sdu;                  /* SDU */
   RguCDatReqInfo  *cDatReqInfo;  /* Data Request Information */
   KwRguSapCb *rgSap;             /* MAC SAP */
   MsgLen   len;                  /* SDU len */
   CmLListCp *sduQ;               /* SDU queue */
   /* kw005.201, updated for statistics */
   KwKwuSapCb   *kwuSapCb;         /* KWU SapCb */
#ifdef MSPD
   extern U32 macGT;
   U8  loopcount =0;
   U8  inCount   =0;
#endif   
   TRC2(kwTmmSndToLi)
#ifdef DEBUGP
   KWDBGP((KW_DBGMASK_TM | KW_DBGMASK_BRIEF | KW_DBGMASK_DL), (_kwPBuf,
           "kwTmmSndToLi(rbCb)\n"));
#endif
   sduQ = &(rbCb->m.tm.sduQ);
   CM_LLIST_FIRST_NODE( sduQ, node);
   while (node != NULLP)
   {
      sdu = (KwSdu *)(node->node);
      if ( rbCb->lch[0].lChType == CM_LTE_LCH_BCCH ||
           rbCb->lch[0].lChType == CM_LTE_LCH_PCCH )
      {
         U16 sfn, subframe;
	 /* MS_FIX: syed sfn is of 10 bytes rather than 8 */
	 sfn = (staInd->transId >> 8) & 0x3FF;
	 subframe = staInd->transId & 0xFF;
	 /* Table
	  * tm.subframe - current subframe 
	  * 0,sfn        7,sfn-1
	  * 4,sfn        1,sfn
	  * 5,sfn        2,sfn
	  * 9,sfn        6,sfn
	  */
	 /* MS_FIX: syed Incorrect sfn determination. 
	  * Take care of SFN wraparound. TODO: It is better for RLC
	  * not to be aware of SCH DELTAs. So we should look for 
	  * sending actual transmission time to RLC. */
	 if ((subframe + TFU_DELTA) >= 10)
	 {
            sfn = (sfn + 1)%1024;
	    }

         if ((sdu->mode.tm.sfn < sfn) ||
		 	 (sdu->mode.tm.subframe < ((subframe+TFU_DELTA)%10)))
         {
            node = node->next;
/* ccpu00127620  logs */
            MSPD_DBG("Releasing SDU of RNTI = %d for RNTI = %d, sfn %d\
                          subframe %d staInd->transId %d, lChType = %d tfuDelta=%d\n", sdu->mode.tm.rnti,
                          staInd->rnti,sfn, subframe,staInd->transId, rbCb->lch[0].lChType, subframe+TFU_DELTA);

            cmLListDelFrm(sduQ, &sdu->lstEnt);
            KW_FREE_BUF(sdu->mBuf);
            KW_FREE(sdu, sizeof(KwSdu));
         }
         else
         {
            break;
	 }
      }
      else
      {
#ifdef MSPD	
	 U16 sduDiffTime;
	 loopcount++; 
         /* Memory leak needs to be fixed */
         sduDiffTime = sdu->mode.tm.sduRecTime > macGT ?
                            ((10240 - sdu->mode.tm.sduRecTime) + macGT) :
                            (macGT - sdu->mode.tm.sduRecTime);
         MSPD_DBG("CRFIX :TmSdu Sta Indication received for Rnti %d Sdu Rnti "
                  "%d sduDiffTime %d SduQCnt %d loopcount %d\n",
                  staInd->rnti, sdu->mode.tm.rnti,sduDiffTime,sduQ->count,
                  loopcount);
	 if(sduDiffTime >= 80)
         {
            MSPD_DBG("Releasing SDU of RNTI %d for Sta RNTI %d"
                     " sdu Rnti %d\n", sdu->mode.tm.rnti, staInd->rnti,
                     sdu->mode.tm.rnti);
            node = node->next;
            cmLListDelFrm(sduQ, &sdu->lstEnt);
            KW_FREE_BUF(sdu->mBuf);
            KW_FREE(sdu, sizeof(KwSdu));      
            continue;
	 }
#endif
         if (sdu->mode.tm.rnti != staInd->rnti)
         {
             node = node->next;
	     inCount++;
             MSPD_DBG("CRFIX :TmSdu Sta Indication received for Rnti %d Sdu Rnti"
                      " %d sduDiffTime %d SduQCnt %d loopcount %d inCount %d\n",
                      staInd->rnti, sdu->mode.tm.rnti,sduDiffTime,sduQ->count,loopcount,inCount);
         }
         else
         {
             MSPD_DBG("CRFIX: TmSdu found %x %d\n", sdu, sdu->mode.tm.rnti);
            break;
         }
      }

   }
   if (node == NULLP)
   {
      MSPD_ERR("SDU not found in TMM Q\n");
      RETVALUE(RFAILED);
   }
   
   SFndLenMsg(sdu->mBuf,&len);

   KW_ALLOC(cDatReqInfo,(Size)sizeof(RguCDatReqInfo));
#if (ERRCLASS & ERRCLS_ADD_RES)
   if ( cDatReqInfo == NULLP )
   {
      KWLOGERROR(ERRCLS_ADD_RES, EKW201, (ErrVal) RFAILED,
                       "KW_ALLOC failed for cDatReqInfo.");
      RETVALUE(RFAILED);
   }
#endif /* ERRCLASS & ERRCLS_ADD_RES */
#ifdef CCPU_OPT
   
   if ( rbCb->lch[0].lChType == CM_LTE_LCH_BCCH ||  
        rbCb->lch[0].lChType == CM_LTE_LCH_PCCH )
   {
      cDatReqInfo->u.timeToTx.sfn = sdu->mode.tm.sfn;
      cDatReqInfo->u.timeToTx.subframe = sdu->mode.tm.subframe; 
   }
   else
   {
      cDatReqInfo->u.rnti = sdu->mode.tm.rnti;
   }
#endif 
   cDatReqInfo->pdu = sdu->mBuf; 
   cDatReqInfo->transId = rbCb->transId;
   cDatReqInfo->cellId  = rbCb->rlcId.cellId;
   cDatReqInfo->lcId   = rbCb->lch[0].lChId; 
   cDatReqInfo->lcType = rbCb->lch[0].lChType; 

   /* kw005.201 ccpu00117318, updating the statistics */
   kwCb.genSts.bytesSent += sdu->sduSz;
   kwCb.genSts.pdusSent++;
   kwuSapCb = (KwKwuSapCb *)(kwCb.kwuSap + rbCb->kwuSapId);
   kwuSapCb->sts.sduTx++;

   /* remove SDU from queue */ 
   sdu->mBuf = NULLP;
   cmLListDelFrm(sduQ,&sdu->lstEnt); 
   KW_FREE(sdu, sizeof(KwSdu));

   rgSap = &(kwCb.rguSap);

   /* If trace flag is enabled send the trace indication */
   if(kwCb.init.trc == TRUE)
   {
      /* Populate the trace params */
      kwLmmSendTrc(EVTRGUCDATREQ, NULLP);
   }

   KwLiRguCDatReq (&rgSap->pst, rgSap->spId, cDatReqInfo);
   
   RETVALUE(ROK); 
   
} /* kwTmmSndToLi */
/**
 * @brief
 *
 *        Handler to process the Data Indication from the lower layer and send the SDU to upper layer.
 *
 * @b Description:
 *
 *        This function processes the PDU receivied from the 
 *        lower layer and sends the same pdu as SDU to the 
 *        upper layer.It sends CRNTI along with the SDU for
 *        CCCH.
 *            
 *  @param[in] rbCb    RB control block. 
 *  @param[in] tCrnti  TCRNTI  
 *  @param[in] pdu     PDU
 *  @return  S16
 *      -# ROK 
 *      -# RFAILED 
 *
 */
#ifdef CCPU_OPT
#ifdef ANSI
PUBLIC S16 kwTmmRcvFrmLi
(
KwRbCb    *rbCb,                /* Rb Control Block */
CmLteRnti  tCrnti,              /* Pdu  data and related information */
Buffer    *pdu                  /* PDU */
)
#else
PUBLIC S16 kwTmmRcvFrmLi(rbCb, tCrnti, pdu)
KwRbCb    *rbCb;                /* Rb Control Block */
CmLteRnti  tCrnti;              /* Pdu  data and related information */
Buffer    *pdu;                 /* PDU */
#endif
#else
#ifdef ANSI
PUBLIC S16 kwTmmRcvFrmLi
(
KwRbCb    *rbCb,                /* Rb Control Block */
Buffer    *pdu                  /* PDU */
)
#else
PUBLIC S16 kwTmmRcvFrmLi(rbCb, pdu)
KwRbCb    *rbCb;                /* Rb Control Block */
Buffer    *pdu;                 /* PDU */
#endif
#endif /* CCPU_OPT */
{
   KwKwuSapCb *kwKwSap;         /* SAP Information */
   KwuDatIndInfo *datIndInfo;   /* Data Indication Information */
   /* kw005.201 ccpu00117318, updating the statistics */
   MsgLen     msgLen;
 
   TRC2(kwTmmRcvFrmLi) 
#ifdef DEBUGP
   KWDBGP((KW_DBGMASK_TM | KW_DBGMASK_BRIEF | KW_DBGMASK_UL), (_kwPBuf,
           "kwTmmRcvFrmLi(rbCb, pdu)\n")); 
#endif 
   KW_ALLOC(datIndInfo,sizeof(KwuDatIndInfo));
#if (ERRCLASS & ERRCLS_ADD_RES)
   if ( datIndInfo == NULLP )
   {
      KWLOGERROR(ERRCLS_ADD_RES, EKW202, (ErrVal) RFAILED,
                       "KW_ALLOC failed for datIndInfo.");
      RETVALUE(RFAILED);
   }
#endif /* ERRCLASS & ERRCLS_ADD_RES */
   kwKwSap = kwCb.kwuSap;    
   cmMemcpy((U8 *)&(datIndInfo->rlcId), (U8 *)&(rbCb->rlcId), sizeof(CmLteRlcId));
/*   KW_MEM_CPY(&(datIndInfo->rlcId),&(rbCb->rlcId),sizeof(CmLteRlcId));*/
#ifdef CCPU_OPT 
   if ( rbCb->lch[0].lChType == CM_LTE_LCH_CCCH ) 
   {
      datIndInfo->tCrnti = tCrnti;
   }
#endif 
   /* kw005.201 ccpu00117318, updating the statistics */
   kwCb.genSts.pdusRecv++;
   SFndLenMsg(pdu, &msgLen);
   kwCb.genSts.bytesRecv += msgLen;
   /* If trace flag is enabled send the trace indication */
   if(kwCb.init.trc == TRUE)
   {
      /* Populate the trace params */
      kwLmmSendTrc(KWU_EVT_DAT_IND, pdu);
   }

   KwUiKwuDatInd( &kwKwSap->pst, kwKwSap->suId, datIndInfo, pdu);
   MSPD_DBG_RLC("[%d][%d] Ul Tmm PDU\n", rbCb->rlcId.ueId, rbCb->rlcId.rbId);  
   RETVALUE(ROK); 
}
/**
 *
 * @brief 
 * 
 *        Handler to process the re-establishment request received from the upper layer. 
 *
 * @b Description: 
 *
 *        This function empties the SDU queue for the RB in the downlink.
 *            
 *  @param[in] rbCb  RB control block. 
 *
 *  @return  S16
 *      -# ROK 
 *       
 **************************************************************************************/
#ifdef ANSI
PUBLIC S16 kwTmmReEstablish
(
KwRbCb    *rbCb         /* RB Control Block */
)
#else
PUBLIC S16 kwTmmReEstablish(rbCb)
KwRbCb *rbCb;            /* RB Control Block */
#endif
{

   TRC2(kwTmmReEstablish)
#ifdef DEBUGP  
   KWDBGP((KW_DBGMASK_TM | KW_DBGMASK_BRIEF | KW_DBGMASK_DL | KW_DBGMASK_UL),
          (_kwPBuf, "kwTmmReEstablish(rbCb)\n"));
#endif
   if (rbCb->dir == KW_DIR_DL)
   {
      kwUtlEmptySduQ(rbCb, &rbCb->m.tm.sduQ);
   }
   RETVALUE(ROK);
}
/**
 *
 * @brief 
 *
 *        Handler to send Status Response to the lower layer.
 *
 * @b Description: 
 *
 *        This function is used to the BO to the lower layer after
 *        receiving a data request from the upper layer. 
 *            
 *  @param[in] rbCb         RB control block. 
 *  @param[in] datReqInfo   Data Request Information.
 *  @param[in] mBuf         SDU Buffer.
 *
 *  @return  S16
 *      -# ROK 
 *      -# RFAILED 
 *
 */

#ifdef ANSI
PRIVATE S16 kwTmmSndStaRsp
(
KwRbCb *rbCb,                           /* RB Control Block */
MsgLen  bo,                             /* Buffer Occupancy */
KwuDatReqInfo *datReqInfo               /* Status response Information */
)
#else
PRIVATE S16 kwTmmSndStaRsp(rbCb,bo,datReqInfo)
KwRbCb     *rbCb;                       /* RB Control Block */
MsgLen     bo;                          /* Buffer Occupancy */
KwuDatReqInfo *datReqInfo;              /* Status response Information */
#endif
{
   RguCStaRspInfo  *staRspInfo;         /* Status Response Information */
   KwRguSapCb *rguSap;                  /* SAP Information */

   TRC3(kwTmmSndStaRsp)

#ifdef DEBUGP
   KWDBGP((KW_DBGMASK_TM | KW_DBGMASK_BRIEF | KW_DBGMASK_DL ),
          (_kwPBuf, "kwTmmSndStaRsp(rbCb, bo, datReqInfo)\n"));
#endif
   rguSap = &(kwCb.rguSap);

   KW_ALLOC(staRspInfo,sizeof(RguCStaRspInfo));
#if (ERRCLASS & ERRCLS_ADD_RES)
   if ( staRspInfo == NULLP )
   {
      KWLOGERROR(ERRCLS_ADD_RES, EKW203, (ErrVal) RFAILED,
                       "KW_ALLOC failed for stRspInfo.");
      RETVALUE(RFAILED);
   }
#endif /* ERRCLASS & ERRCLS_ADD_RES */
   staRspInfo->bo = bo;
   staRspInfo->cellId = rbCb->rlcId.cellId;
   staRspInfo->lcId   = rbCb->lch[0].lChId;
   staRspInfo->lcType = rbCb->lch[0].lChType;
#ifdef CCPU_OPT    
   if ( rbCb->lch[0].lChType == CM_LTE_LCH_BCCH ||
        rbCb->lch[0].lChType == CM_LTE_LCH_PCCH )
   {
      staRspInfo->u.timeToTx.sfn      = datReqInfo->tm.tmg.sfn;
      staRspInfo->u.timeToTx.subframe = datReqInfo->tm.tmg.subframe;
   }
   else if ( rbCb->lch[0].lChType == CM_LTE_LCH_CCCH )
   {
       staRspInfo->u.rnti = datReqInfo->tm.rnti;
   }
#endif

   /* If trace flag is enabled send the trace indication */
   if(kwCb.init.trc == TRUE)
   {
      /* Populate the trace params */
      kwLmmSendTrc(EVTRGUCSTARSP, NULLP);
   }

   KwLiRguCStaRsp(&rguSap->pst,rguSap->spId,staRspInfo);

   RETVALUE(ROK);
} /* kwTmmSndStaRsp */

#ifdef _cplusplus
}
#endif
/*@}*/
/********************************************************************30**
         End of file:     gp_tmm.c@@/main/2 - Fri Nov 13 14:14:01 2009
*********************************************************************31*/

/********************************************************************40**
  
        Notes:
  
*********************************************************************41*/

/********************************************************************50**

*********************************************************************51*/

/********************************************************************60**
  
        Revision history:
  
*********************************************************************61*/

/********************************************************************90**
     ver       pat    init                  description
------------ -------- ---- ----------------------------------------------
/main/1      ---       vp   1. initial release.
/main/2      ---       nm   1. LTERLC Release 2.1
/main/3      kw002.201 vp   1. Patch for optimization,fixes for multi-region
                               and retransmission.
/main/4      kw005.201 ap   1. Updating the statistics.                       
*********************************************************************91*/
