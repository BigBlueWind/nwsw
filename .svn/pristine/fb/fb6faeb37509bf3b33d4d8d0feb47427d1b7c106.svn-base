# generates strings for enum values: e_ModuleId
 
$h_file=shift; # bs_modules.h
open(IN,  "<",  $h_file)  or die "Can't open $h_file: $!";
# search for enums like MODID_, and generate a string for them

my $now = localtime time;
print "/* generated by $0 on $now */\n";
#print "#include \"modId_print.h\"\n";
print "#include \"all_cmn.h\"\n";

print "UINT8* enumModIdToStr(UINT32 enumNum)\n";
print "{\n";
print "  switch(enumNum)\n";  
print "  {\n";

while (<IN>)
{
  $line = $_;
  $start = 1 if ($line =~ /enum e_ModuleId/);
  if ($start eq 1)
  {
    if($line =~ /(MODID_.*)\b/) 
    {
      $word = $1;
      $word =~ s/(.*)=(.*)/$1/;
      $word =~ s/\n//;
      $word =~ s/\s//;
      $word =~ s/,//;
      $word =~s/\/\*.*//;
      print "    case $word: \n";  
      $word =~ s/(.*)MODID_//;
       print "      return \"MODID_$word\"\;\n";  
    }
  }
  $start = 0 if ($line =~ /\}/);
  next;
}

print  "    default: return \"name-not-found\"\;\n";
print  "  }\n"; # switch
print  "}\n"; # function

close(IN);

open(IN,  "<",  $h_file)  or die "Can't open $h_file: $!";

print "ModuleId strModIdToEnum(UINT8* modIdStr)\n";
print "{\n";

while (<IN>)
{
  $line = $_;
  $start = 1 if ($line =~ /enum e_ModuleId/);
  if ($start eq 1)
  {
    if($line =~ /(MODID_.*)\b/) 
    {
      $word = $1; 
#      print "matched $word";
      $word =~ s/(.*)=(.*)/$1/; # remove enumName <= ...>
      $word =~ s/\n//;
      $word =~ s/\s//;
      $word =~ s/,//;
      $word =~s/\/\*.*//; # remove comment  
      #print "MADHU";
      print "  if (strncmp(modIdStr, \"$word\", strlen(modIdStr)) EQ 0) \n";   
      print "  { \n";
      print "    return $word; \n";
      print "  } \n" ;
    }
  }
  $start = 0 if ($line =~ /\}/);
  #next;
}

      print "  return MODID_NONE; \n";
print  "}\n"; # function
