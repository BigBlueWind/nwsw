/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.iterate.conf 19302 2010-08-13 12:19:42Z dts12 $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

#include "bs_modules.h"
#include "all_cfg.h"
#include "all_cmn.h"
#include "tlv_enc_dec.h"

#include "sih.h"
#include "syslog.h"

#include "phyConfig.h"

Netsnmp_Node_Handler phyConfigTable_handler;
Netsnmp_First_Data_Point  phyConfigTable_get_first_data_point;
Netsnmp_Next_Data_Point   phyConfigTable_get_next_data_point;

struct phyConfigTable_entry  *phyConfigTable_head = NULL;
static TBOOL g_sihPhyConfigSetReqProcessed = FALSE;
static TBOOL g_sihPhyConfigGetReqProcessed = FALSE;
static UINT32 g_prevPhyConfigReqCount = 0;
static UINT32 g_phyConfigFirstCall = 0;

/* free_phyConfigTable */
/**
* @details 
*          This is the routine which frees the phy config entry. 
*/
void free_phyConfigTable(void)
{
  phyConfigTableEntry  * current = phyConfigTable_head;

  if (current) 
  {
  for (current = phyConfigTable_head->next ; current != NULL; current = current->next) {
    SNMP_FREE( current );  
    }
   
  SNMP_FREE(phyConfigTable_head);
  phyConfigTable_head = NULL;
  }
  return;
}


/**
* @details 
*          This is the routine which handles get response from SIH Get Processor
*          and prepare the SNMP GET response for EMS. 
* @param tlvArray contains pointer to TLV array.     
*/
TBOOL sendPhyConfigSnmpGetResponse (
  IO TlvArray    *tlvArray
  )
{
  int  totalNumRow, totalNumCol, i=0, colmn=0;
  phyConfigTableEntry * prevPtr = NULL;

  printTLV(tlvArray);

  /* Total no. of Colmns */
  totalNumCol = PHY_CONFIG_MAX_COL;
  /* Total no. of Row = (No. of TLV)/(No. of Columns) */
  totalNumRow = tlvArray->numTlvs/totalNumCol;

  for (i=1;  i <= totalNumRow;  i++) 
      {
      phyConfigTableEntry *ptr=(phyConfigTableEntry *)malloc(sizeof(phyConfigTableEntry));

      clearBytes(ptr,sizeof(phyConfigTableEntry));

      /* Fill Data in TLV */
      for(colmn = 1 ; colmn <= totalNumCol ; colmn++)
        {
       if (colmn EQ COLUMN_PHYPROFILEID)
           {
            ptr->phyProfileId = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }        
       if (colmn EQ COLUMN_PHICHRESOURCE)
           {
            ptr->phichResource = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }        
       if (colmn EQ COLUMN_PRACHFREQOFFSET)
           {
            ptr->prachFreqOffset = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }        
        if (colmn EQ COLUMN_REFERENCESIGNALPOWER)
           {
            ptr->referenceSignalPower = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_CELLPHYPB)
           {
            ptr->cellPhyPb = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_SRSENABLED)
           {
            ptr->srsEnabled = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_ALPHA)
           {
            ptr->alpha = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }        
        if (colmn EQ COLUMN_PONOMINALPUCCH)
           {
            ptr->poNominalPucch = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_CELLPHYPA)
           {
            ptr->cellPhyPa = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_BETAOFFSETACKINDEX)
           {
            ptr->betaOffsetAckIndex = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_BETAOFFSETRIINDEX)
           {
            ptr->betaOffsetRiIndex = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_BETAOFFSETCQIINDEX)
           {
            ptr->betaOffsetCqiIndex = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }        
        if (colmn EQ COLUMN_POUEPUSCH)
           {
            ptr->poUePusch = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_POUEPUCCH)
           {
            ptr->poUePucch = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }        
        if (colmn EQ COLUMN_PSRSOFFSET)
           {
            ptr->pSrsOffset = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_PHICHDURATION)
           {
            ptr->phichDuration = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_TOTALTXPOWER)
           {
            ptr->totalTxPower = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        }

       ptr->next = NULL;

      if (prevPtr == NULL) {
           phyConfigTable_head =  prevPtr = ptr;
       }

      prevPtr->next = ptr;
      prevPtr = ptr;
     }
    prevPtr->next = NULL;

    if (phyConfigTable_head)
        return TRUE;
    else
        return FALSE;
}

/**
* @details 
*          This routine sends phy config set request to BSM, it uses SIH Set 
*          Processor to create and send the message to BSM. 
* @param sihTagInfo is used to have the tag information for set request.
*/
TBOOL sendPhyConfigSnmpSetRequest ( 
      IO TagInfo  sihTagInfo,
      IO TlvArray *tlvArray
      )
{
   phyConfigTableEntry * setReqData = NULL;   
   TBOOL status = FALSE;
   int colmn = 0;
   unsigned char * ipAddr;
   struct in_addr ip;
 
   setReqData = phyConfigTable_head;

   /* Fill Data in TLV */
   for(colmn = 0; colmn < tlvArray->numTlvs; colmn++)
   {
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_PHYPROFILEID)
         {
           putUint8InArray( setReqData->phyProfileId, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->phyProfileId);     
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_PHICHRESOURCE)
         {
           putUint32InArray( setReqData->phichResource, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->phichResource);     
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_PRACHFREQOFFSET)
         {
           putUint8InArray( setReqData->prachFreqOffset, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->prachFreqOffset); 
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_REFERENCESIGNALPOWER)
         {
           putUint8InArray( setReqData->referenceSignalPower, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->referenceSignalPower); 
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_CELLPHYPB)
         {
           putUint8InArray( setReqData->cellPhyPb, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->cellPhyPb);     
         }          
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_SRSENABLED)
         {
           putUint8InArray( setReqData->srsEnabled, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->srsEnabled);     
         }          
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_ALPHA)
         {
           putUint32InArray( setReqData->alpha, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->alpha);     
         }       
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_PONOMINALPUCCH)
         {
           putUint8InArray( setReqData->poNominalPucch, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->poNominalPucch);     
         }   
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_CELLPHYPA)
         {
           putUint32InArray( setReqData->cellPhyPa, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->cellPhyPa);     
         }          
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_BETAOFFSETACKINDEX)
         {
           putUint8InArray( setReqData->betaOffsetAckIndex, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->betaOffsetAckIndex);     
         }          
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_BETAOFFSETRIINDEX)
         {
           putUint8InArray( setReqData->betaOffsetRiIndex, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->betaOffsetRiIndex);     
         }          
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_BETAOFFSETCQIINDEX)
         {
           putUint8InArray( setReqData->betaOffsetCqiIndex, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->betaOffsetCqiIndex);     
         }          
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_POUEPUSCH)
         {
           putUint8InArray( setReqData->poUePusch, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->poUePusch);     
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_POUEPUCCH)
         {
           putUint8InArray( setReqData->poUePucch, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->poUePucch);     
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_PSRSOFFSET)
         {
           putUint8InArray( setReqData->pSrsOffset, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->pSrsOffset);     
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_PHICHDURATION)
         {
           putUint32InArray( setReqData->phichDuration, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->phichDuration);     
         }          
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_TOTALTXPOWER)
         {
           putUint8InArray( setReqData->totalTxPower, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->totalTxPower);     
         }
   }

   /* Invoke SIH Set Processor */
   status = sihSetProcessor (sihTagInfo,  tlvArray);
   if (status EQ TRUE)
     {
      g_sihPhyConfigSetReqProcessed = TRUE;
      g_sihPhyConfigGetReqProcessed = FALSE;
      /* free the resources */      
      free_phyConfigTable(); 
     }
   return status;
}


/**
* @details 
*          This is the routine for initializing phyConfig module.
*/
void
init_phyConfig(void)
{
  /* here we initialize all the tables we're planning on supporting */
    initialize_table_phyConfigTable();
}

/*  # Determine the first/last column names

 Initialize the phyConfigTable table by defining its contents and how it's structured */
void
initialize_table_phyConfigTable(void)
{
    const oid phyConfigTable_oid[] = {1,3,6,1,4,1,9344,501,PHYCONFIG,1};
    const size_t phyConfigTable_oid_len   = OID_LENGTH(phyConfigTable_oid);
    netsnmp_handler_registration    *reg;
    netsnmp_iterator_info           *iinfo;
    netsnmp_table_registration_info *table_info;

    DEBUGMSGTL(("phyConfig:init", "initializing table phyConfigTable\n"));

    reg = netsnmp_create_handler_registration(
              "phyConfigTable",     phyConfigTable_handler,
              phyConfigTable_oid, phyConfigTable_oid_len,
              HANDLER_CAN_RWRITE
              );

    table_info = SNMP_MALLOC_TYPEDEF( netsnmp_table_registration_info );
    netsnmp_table_helper_add_indexes(table_info,
                           ASN_UNSIGNED,  /* index: phyProfileId */
                           0);
    table_info->min_column = COLUMN_PHYPROFILEID;
    table_info->max_column = PHY_CONFIG_MAX_COL;
    
    iinfo = SNMP_MALLOC_TYPEDEF( netsnmp_iterator_info );
    iinfo->get_first_data_point = phyConfigTable_get_first_data_point;
    iinfo->get_next_data_point  = phyConfigTable_get_next_data_point;
    iinfo->table_reginfo        = table_info;
    
    netsnmp_register_table_iterator( reg, iinfo );

    /* Initialise the contents of the table here */
}


#ifndef PWAV_SIH 
/* create a new row in the (unsorted) table */
struct phyConfigTable_entry *
phyConfigTable_createEntry(
                 unsigned char  phyProfileId,
                ) {
    struct phyConfigTable_entry *entry;

    entry = SNMP_MALLOC_TYPEDEF(struct phyConfigTable_entry);
    if (!entry)
        return NULL;

    entry->phyProfileId = phyProfileId;
    entry->next = phyConfigTable_head;
    phyConfigTable_head = entry;
    return entry;
}

/* remove a row from the table */
void
phyConfigTable_removeEntry( struct phyConfigTable_entry *entry ) {
    struct phyConfigTable_entry *ptr, *prev;

    if (!entry)
        return;    /* Nothing to remove */

    for ( ptr  = phyConfigTable_head, prev = NULL;
          ptr != NULL;
          prev = ptr, ptr = ptr->next ) {
        if ( ptr == entry )
            break;
    }
    if ( !ptr )
        return;    /* Can't find it */

    if ( prev == NULL )
        phyConfigTable_head = ptr->next;
    else
        prev->next = ptr->next;

    SNMP_FREE( entry );   /* XXX - release any other internal resources */
}
#endif /* PWAV_SIH */


/* Example iterator hook routines - using 'get_next' to do most of the work */
netsnmp_variable_list *
phyConfigTable_get_first_data_point(void **my_loop_context,
                          void **my_data_context,
                          netsnmp_variable_list *put_index_data,
                          netsnmp_iterator_info *mydata)
{
    TagInfo sihTagInfo;
    TBOOL status = FALSE;

    if (g_sihPhyConfigGetReqProcessed EQ FALSE)
        {
        /* Set SIH Get Request Tag Info */
        sihTagInfo.tableId = PHYCONFIG;
        sihTagInfo.rowId = CONFIG_ROW_ID_NONE; 
        sihTagInfo.colId = CONFIG_COL_ID_NONE;                

        status = sihGetProcessor (sihTagInfo);
        if ( status EQ TRUE )
            {
            logInfo("%s","Get Processor Succedded");
            if (phyConfigTable_head)
                {
		g_phyConfigFirstCall = 1;
                g_sihPhyConfigGetReqProcessed = TRUE;
                }
            }
        else
            logError("%s","Get Processor Failed");
        }        
    
    *my_loop_context = phyConfigTable_head;
    return phyConfigTable_get_next_data_point(my_loop_context, my_data_context,
                                    put_index_data,  mydata );
}

netsnmp_variable_list *
phyConfigTable_get_next_data_point(void **my_loop_context,
                          void **my_data_context,
                          netsnmp_variable_list *put_index_data,
                          netsnmp_iterator_info *mydata)
{
    struct phyConfigTable_entry *entry = (struct phyConfigTable_entry *)*my_loop_context;
    netsnmp_variable_list *idx = put_index_data;

    if ( entry ) {
        snmp_set_var_typed_integer( idx, ASN_UNSIGNED, entry->phyProfileId );
        idx = idx->next_variable;
        *my_data_context = (void *)entry;
        *my_loop_context = (void *)entry->next;
        return put_index_data;
    } else {
        return NULL;
    }
}


/** handles requests for the phyConfigTable table */
int
phyConfigTable_handler(
    netsnmp_mib_handler               *handler,
    netsnmp_handler_registration      *reginfo,
    netsnmp_agent_request_info        *reqinfo,
    netsnmp_request_info              *requests) {

    netsnmp_request_info       *request = NULL;
    netsnmp_table_request_info *table_info = NULL;
    struct phyConfigTable_entry          *table_entry = NULL;
    int loopCount = 0;
    int ret;
    TagInfo sihTagInfo;
    TlvArray tlvArray;
    int rowIndex = 0, colId = 0;
    TBOOL status = FALSE;    


    DEBUGMSGTL(("phyConfig:handler", "Processing request (%d)\n", reqinfo->mode));

    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
    case MODE_GET:
        for (request=requests; request; request=request->next) {

            loopCount++;
            if (request->processed != 0)
            {
	     g_prevPhyConfigReqCount = 0;	
             g_sihPhyConfigGetReqProcessed = FALSE;

             /* free the resources */
             free_phyConfigTable(); 
             /* Here loopCount is decremented, Due to calling of free function two times in SNMP-GETNEXT
              * on single parameter -- 20/07/11 */
             loopCount--;
             continue;
            }

            /* perform anything here that you need to do before each
               request is processed. */           

            /* the following extracts the my_data_context pointer set in
               the loop functions above.  You can then use the results to
               help return data for the columns of the phyConfigTable table 
               in question */

            table_entry = (struct phyConfigTable_entry *)
                              netsnmp_extract_iterator_context(request);

            if ( table_entry == NULL) {
                if (reqinfo->mode == MODE_GET) {
                    netsnmp_set_request_error(reqinfo, request,SNMP_NOSUCHINSTANCE);
                    continue;
                }
                /* XXX: no row existed, if you support creation and this is a
                   set, start dealing with it here, else continue */
            }

            table_info  =     netsnmp_extract_table_info(      request);

            /* table_info->colnum contains the column number requested */
            /* table_info->indexes contains a linked list of snmp variable
               bindings for the indexes of the table.  Values in the list
               have been set corresponding to the indexes of the
               request */
            if (table_info==NULL) {
                continue;
            }         
    
            switch (table_info->colnum) {
            case COLUMN_PHYPROFILEID:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->phyProfileId);
                break;
            case COLUMN_PHICHRESOURCE:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->phichResource);
                break;
            case COLUMN_PRACHFREQOFFSET:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->prachFreqOffset);
                break;
            case COLUMN_REFERENCESIGNALPOWER:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->referenceSignalPower);
                break;
            case COLUMN_CELLPHYPB:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->cellPhyPb);
                break;
            case COLUMN_SRSENABLED:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->srsEnabled);
                break;
            case COLUMN_ALPHA:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->alpha);
                break;
            case COLUMN_PONOMINALPUCCH:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->poNominalPucch);
                break;
            case COLUMN_CELLPHYPA:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->cellPhyPa);
                break;
            case COLUMN_BETAOFFSETACKINDEX:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->betaOffsetAckIndex);
                break;
            case COLUMN_BETAOFFSETRIINDEX:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->betaOffsetRiIndex);
                break;
            case COLUMN_BETAOFFSETCQIINDEX:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->betaOffsetCqiIndex);
                break;
            case COLUMN_POUEPUSCH:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->poUePusch);
                break;
            case COLUMN_POUEPUCCH:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->poUePucch);
                break;
            case COLUMN_PSRSOFFSET:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->pSrsOffset);
                break;
            case COLUMN_PHICHDURATION:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->phichDuration);
                break;
            case COLUMN_TOTALTXPOWER:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->totalTxPower);
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
	if(g_phyConfigFirstCall EQ 1)
         {
            g_phyConfigFirstCall = 0;
            g_prevPhyConfigReqCount = loopCount;
            // This will occur in case of, when SNMP-GET or SNMP-GETNEXT of Single Parameter occurred.
            // In the first call itself loopCount becomes one.
            // In General Case, the loopCount will be always > 1 because every table contains 
            // index column to fetch the row and remaining columns contain table attributes.
            if(loopCount EQ 1)
            {
               //Setting it to false in case of SNMP-GET request for single parameter.
               g_sihPhyConfigGetReqProcessed = FALSE;
               // Free all resources.
               free_phyConfigTable();
            }
         }
         else if(loopCount > 1 || g_prevPhyConfigReqCount > 1)
         {
            //update g_prevReqCount with current loopCount for next call of Table_handler
            g_prevPhyConfigReqCount = loopCount;
         }
         else if(loopCount EQ 1)
         {
            //Setting it to false in case of SNMP-GET request for single parameter.
            g_sihPhyConfigGetReqProcessed = FALSE;
            // Free all resources.
            free_phyConfigTable();
         }
        break;

        /*
         * Write-support
         */
    case MODE_SET_RESERVE1:
#ifndef PWAV_SIH      
        for (request=requests; request; request=request->next) {
            table_entry = (struct phyConfigTable_entry *)
                              netsnmp_extract_iterator_context(request);
            table_info  =     netsnmp_extract_table_info(      request);
    
            switch (table_info->colnum) {
            case COLUMN_PHYPROFILEID:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_PHICHRESOURCE:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_PRACHFREQOFFSET:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_REFERENCESIGNALPOWER:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_CELLPHYPB:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SRSENABLED:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_ALPHA:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_PONOMINALPUCCH:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_CELLPHYPA:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_BETAOFFSETACKINDEX:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_BETAOFFSETRIINDEX:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_BETAOFFSETCQIINDEX:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_POUEPUSCH:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_POUEPUCCH:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_PSRSOFFSET:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            default:
                netsnmp_set_request_error( reqinfo, request,
                                           SNMP_ERR_NOTWRITABLE );
                return SNMP_ERR_NOERROR;
            }
        }
#endif /* PWAV_SIH */     
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        g_sihPhyConfigSetReqProcessed = FALSE; 

        clearBytes(&sihTagInfo, sizeof(TagInfo));
        clearBytes(&tlvArray, sizeof(TlvArray));
 
        for (request=requests; request; request=request->next) {
            table_entry = (struct phyConfigTable_entry *)
                              netsnmp_extract_iterator_context(request);
            table_info  =     netsnmp_extract_table_info(      request);

            if(table_entry == NULL){
                logInfo(" %s\n", "table_entry is NULL");
                if (reqinfo->mode == MODE_SET_ACTION) {
                    netsnmp_set_request_error(reqinfo, request,SNMP_NOSUCHINSTANCE);
                    continue;
                }
                /* XXX: no row existed, if you support creation and this is a
                   set, start dealing with it here, else continue */
            }

            if(table_info == NULL){
                logInfo(" %s\n", "table_info is NULL");
                continue;
            }

            colId = table_info->colnum;
            /* set the row index */
            rowIndex = requests->index;
    
            switch (table_info->colnum) {
            case COLUMN_PHYPROFILEID:
                table_entry->phyProfileId     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, PHYCONFIG, rowIndex, COLUMN_PHYPROFILEID);
                tlvArray.numTlvs++;
                break;
            case COLUMN_PHICHRESOURCE:
                table_entry->phichResource     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, PHYCONFIG, rowIndex, COLUMN_PHICHRESOURCE);
                tlvArray.numTlvs++;
                break;
            case COLUMN_PRACHFREQOFFSET:
                table_entry->prachFreqOffset     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, PHYCONFIG, rowIndex, COLUMN_PRACHFREQOFFSET);
                tlvArray.numTlvs++;
                break;
            case COLUMN_REFERENCESIGNALPOWER:
                table_entry->referenceSignalPower     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, PHYCONFIG, rowIndex, COLUMN_REFERENCESIGNALPOWER);
                tlvArray.numTlvs++;
                break;
            case COLUMN_CELLPHYPB:
                table_entry->cellPhyPb     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, PHYCONFIG, rowIndex, COLUMN_CELLPHYPB);
                tlvArray.numTlvs++;
                break;
            case COLUMN_SRSENABLED:
                table_entry->srsEnabled     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, PHYCONFIG, rowIndex, COLUMN_SRSENABLED);
                tlvArray.numTlvs++;
                break;
            case COLUMN_ALPHA:
                table_entry->alpha     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, PHYCONFIG, rowIndex, COLUMN_ALPHA);
                tlvArray.numTlvs++;
                break;
            case COLUMN_PONOMINALPUCCH:
                table_entry->poNominalPucch     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, PHYCONFIG, rowIndex, COLUMN_PONOMINALPUCCH);
                tlvArray.numTlvs++;
                break;
            case COLUMN_CELLPHYPA:
                table_entry->cellPhyPa     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, PHYCONFIG, rowIndex, COLUMN_CELLPHYPA);
                tlvArray.numTlvs++;
                break;
            case COLUMN_BETAOFFSETACKINDEX:
                table_entry->betaOffsetAckIndex     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, PHYCONFIG, rowIndex, COLUMN_BETAOFFSETACKINDEX);
                tlvArray.numTlvs++;
                break;
            case COLUMN_BETAOFFSETRIINDEX:
                table_entry->betaOffsetRiIndex     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, PHYCONFIG, rowIndex, COLUMN_BETAOFFSETRIINDEX);
                tlvArray.numTlvs++;
                break;
            case COLUMN_BETAOFFSETCQIINDEX:
                table_entry->betaOffsetCqiIndex     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, PHYCONFIG, rowIndex, COLUMN_BETAOFFSETCQIINDEX);
                tlvArray.numTlvs++;
                break;
            case COLUMN_POUEPUSCH:
                table_entry->poUePusch     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, PHYCONFIG, rowIndex, COLUMN_POUEPUSCH);
                tlvArray.numTlvs++;
                break;
            case COLUMN_POUEPUCCH:
                table_entry->poUePucch     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, PHYCONFIG, rowIndex, COLUMN_POUEPUCCH);
                tlvArray.numTlvs++;
                break;
            case COLUMN_PSRSOFFSET:
                table_entry->pSrsOffset     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, PHYCONFIG, rowIndex, COLUMN_PSRSOFFSET);
                tlvArray.numTlvs++;
                break;
            case COLUMN_PHICHDURATION:
                table_entry->phichDuration     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, PHYCONFIG, rowIndex, COLUMN_PHICHDURATION);
                tlvArray.numTlvs++;
                break;
            case COLUMN_TOTALTXPOWER:
                table_entry->totalTxPower     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, PHYCONFIG, rowIndex, COLUMN_TOTALTXPOWER);
                tlvArray.numTlvs++;
                break;
            }
        }

        if ((request == NULL) && (g_sihPhyConfigSetReqProcessed EQ FALSE))
            /* Processed all requests and table entry is filled with
             * requested data. */
            {
            /* Set SIH Set Request Tag Info */
            sihTagInfo.tableId = PHYCONFIG;

            sihTagInfo.rowId = rowIndex; 

            status = sendPhyConfigSnmpSetRequest (sihTagInfo, &tlvArray);
            if (status EQ TRUE)
            {
                logInfo("%s","SET Succedded");
            }
            else
                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_GENERR );
            }
        break;

    case MODE_SET_UNDO:
#ifndef PWAV_SIH 
        for (request=requests; request; request=request->next) {
            table_entry = (struct phyConfigTable_entry *)
                              netsnmp_extract_iterator_context(request);
            table_info  =     netsnmp_extract_table_info(      request);
    
            switch (table_info->colnum) {
            case COLUMN_PHYPROFILEID:
                table_entry->phyProfileId     = table_entry->old_phyProfileId;
                table_entry->old_phyProfileId = 0;
                break;
            case COLUMN_PHICHRESOURCE:
                table_entry->phichResource     = table_entry->old_phichResource;
                table_entry->old_phichResource = 0;
                break;
            case COLUMN_PRACHFREQOFFSET:
                table_entry->prachFreqOffset     = table_entry->old_prachFreqOffset;
                table_entry->old_prachFreqOffset = 0;
                break;
            case COLUMN_REFERENCESIGNALPOWER:
                table_entry->referenceSignalPower     = table_entry->old_referenceSignalPower;
                table_entry->old_referenceSignalPower = 0;
                break;
            case COLUMN_CELLPHYPB:
                table_entry->cellPhyPb     = table_entry->old_cellPhyPb;
                table_entry->old_cellPhyPb = 0;
                break;
            case COLUMN_SRSENABLED:
                table_entry->srsEnabled     = table_entry->old_srsEnabled;
                table_entry->old_srsEnabled = 0;
                break;
            case COLUMN_ALPHA:
                table_entry->alpha     = table_entry->old_alpha;
                table_entry->old_alpha = 0;
                break;
            case COLUMN_PONOMINALPUCCH:
                table_entry->poNominalPucch     = table_entry->old_poNominalPucch;
                table_entry->old_poNominalPucch = 0;
                break;
            case COLUMN_CELLPHYPA:
                table_entry->cellPhyPa     = table_entry->old_cellPhyPa;
                table_entry->old_cellPhyPa = 0;
                break;
            case COLUMN_BETAOFFSETACKINDEX:
                table_entry->betaOffsetAckIndex     = table_entry->old_betaOffsetAckIndex;
                table_entry->old_betaOffsetAckIndex = 0;
                break;
            case COLUMN_BETAOFFSETRIINDEX:
                table_entry->betaOffsetRiIndex     = table_entry->old_betaOffsetRiIndex;
                table_entry->old_betaOffsetRiIndex = 0;
                break;
            case COLUMN_BETAOFFSETCQIINDEX:
                table_entry->betaOffsetCqiIndex     = table_entry->old_betaOffsetCqiIndex;
                table_entry->old_betaOffsetCqiIndex = 0;
                break;
            case COLUMN_POUEPUSCH:
                table_entry->poUePusch     = table_entry->old_poUePusch;
                table_entry->old_poUePusch = 0;
                break;
            case COLUMN_POUEPUCCH:
                table_entry->poUePucch     = table_entry->old_poUePucch;
                table_entry->old_poUePucch = 0;
                break;
            case COLUMN_PSRSOFFSET:
                table_entry->pSrsOffset     = table_entry->old_pSrsOffset;
                table_entry->old_pSrsOffset = 0;
                break;
            case COLUMN_PHICHDURATION:
                table_entry->phichDuration     = table_entry->old_phichDuration;
                table_entry->old_phichDuration = 0;
                break;
            case COLUMN_TOTALTXPOWER:
                table_entry->totalTxPower     = table_entry->old_totalTxPower;
                table_entry->old_totalTxPower = 0;
                break;
            }
        }
#endif /* PWAV_SIH */
        break;

    case MODE_SET_COMMIT:
        break;
    }
    return SNMP_ERR_NOERROR;
}
