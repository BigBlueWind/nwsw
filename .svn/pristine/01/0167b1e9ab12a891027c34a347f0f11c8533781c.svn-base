/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.iterate.conf 17695 2009-07-21 12:22:18Z dts12 $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

#include "bs_modules.h"
#include "all_cfg.h"
#include "all_cmn.h"
#include "tlv_enc_dec.h"

#include "sih.h"
#include "syslog.h"

#include "sysInfo1Config.h"

/* function declarations */
Netsnmp_Node_Handler sysInfo1ConfigTable_handler;
Netsnmp_First_Data_Point  sysInfo1ConfigTable_get_first_data_point;
Netsnmp_Next_Data_Point   sysInfo1ConfigTable_get_next_data_point;

/* globals */
struct sysInfo1ConfigTable_entry  *sysInfo1ConfigTable_head = NULL;
static TBOOL g_sihSysInfo1ConfigSetReqProcessed = FALSE;
static TBOOL g_sihSysInfo1ConfigGetReqProcessed = FALSE;
static UINT32 g_prevSysInfo1ConfigReqCount = 0;
static UINT32 g_sysInfo1ConfigFirstCall = 0;

/* free_sysInfo1ConfigTable */
/**
* @details 
*          This is the routine which frees the bs config entry. 
*/
void free_sysInfo1ConfigTable(void)
{
  sysInfo1ConfigTableEntry  * current = sysInfo1ConfigTable_head;

  if (current) 
  {
  for (current = sysInfo1ConfigTable_head->next ; current != NULL; current = current->next) {
    SNMP_FREE( current );  
    }
   
  SNMP_FREE(sysInfo1ConfigTable_head);
  sysInfo1ConfigTable_head = NULL;
  }
  return;
}


/**
* @details 
*          This is the routine which handles get response from SIH Get Processor
*          and prepare the SNMP GET response for EMS. 
* @param tlvArray contains pointer to TLV array.     
*/
TBOOL sendSysInfo1ConfigSnmpGetResponse (
  IO TlvArray    *tlvArray
  )
{
  int  totalNumRow, totalNumCol, i=0, colmn=0;
  sysInfo1ConfigTableEntry * prevPtr = NULL;

  printTLV(tlvArray);

  /* Total no. of Colmns */
  totalNumCol = SYS_INFO1_CONFIG_MAX_COL;

  /* Total no. of Row = (No. of TLV)/(No. of Columns) */
  totalNumRow = tlvArray->numTlvs/totalNumCol;

  for (i=1;  i <= totalNumRow;  i++) 
      {
      sysInfo1ConfigTableEntry *ptr=(sysInfo1ConfigTableEntry *)malloc(sizeof(sysInfo1ConfigTableEntry));

      clearBytes(ptr,sizeof(sysInfo1ConfigTableEntry));

      /* Fill Data in TLV */
      for(colmn = 1 ; colmn <= totalNumCol ; colmn++)
        {
       if (colmn EQ COLUMN_SYSINFO1PROFILEID)
           {
            ptr->sysInfo1ProfileId = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }        
        if (colmn EQ COLUMN_INTRAFREQRESELECTION)
           {
            ptr->intraFreqReselection = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }        
        if (colmn EQ COLUMN_QRXLEVMIN)
           {
            ptr->qRxLevMin = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }        
        if (colmn EQ COLUMN_QRXLEVMINOFFSET)
           {
            ptr->qRxLevMinOffset = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }        
        if (colmn EQ COLUMN_SIB2PERIODICITY)
           {
            ptr->sib2Periodicity = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }        
        if (colmn EQ COLUMN_SIB3PERIODICITY)
           {
            ptr->sib3Periodicity = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }        
        if (colmn EQ COLUMN_SIB4PERIODICITY)
           {
            ptr->sib4Periodicity = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }        
        if (colmn EQ COLUMN_SIWINDOWLENGTH)
           {
            ptr->siWindowLength = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }        
        }

       ptr->next = NULL;

      if (prevPtr == NULL) {
           sysInfo1ConfigTable_head =  prevPtr = ptr;
       }

      prevPtr->next = ptr;
      prevPtr = ptr;
     }
    prevPtr->next = NULL;

    if (sysInfo1ConfigTable_head)
        return TRUE;
    else
        return FALSE;
}

/**
* @details 
*          This routine sends bs config set request to BSM, it uses SIH Set 
*          Processor to create and send the message to BSM. 
* @param sihTagInfo is used to have the tag information for set request.
*/
TBOOL sendSysInfo1ConfigSnmpSetRequest ( 
      IO TagInfo  sihTagInfo,
      IO TlvArray *tlvArray
      )
{
   sysInfo1ConfigTableEntry * setReqData = NULL;   
   TBOOL status = FALSE;
   int colmn = 0;
 
   setReqData = sysInfo1ConfigTable_head;

   /* Fill Data in TLV */
   for(colmn = 0; colmn < tlvArray->numTlvs; colmn++)
   {
       if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_SYSINFO1PROFILEID)
       {
           putUint8InArray( setReqData->sysInfo1ProfileId, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->sysInfo1ProfileId);
       }
       if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_INTRAFREQRESELECTION)
       {
           putUint32InArray( setReqData->intraFreqReselection, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->intraFreqReselection);
       }       
       if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_QRXLEVMIN)
       {
           putUint8InArray( setReqData->qRxLevMin, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->qRxLevMin);     
       }       
       if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_QRXLEVMINOFFSET)
       {
           putUint8InArray( setReqData->qRxLevMinOffset, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->qRxLevMinOffset); 
       }       
       if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_SIB2PERIODICITY)
       {
           putUint32InArray( setReqData->sib2Periodicity, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->sib2Periodicity); 
       }       
       if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_SIB3PERIODICITY)
       {
           putUint32InArray( setReqData->sib3Periodicity, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->sib3Periodicity); 
       }       
       if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_SIB4PERIODICITY)
       {
           putUint32InArray( setReqData->sib4Periodicity, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->sib4Periodicity); 
       }       
       if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_SIWINDOWLENGTH)
       {
           putUint32InArray( setReqData->siWindowLength, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->siWindowLength); 
       }       
   }

   /* Invoke SIH Set Processor */
   status = sihSetProcessor (sihTagInfo, tlvArray);
   if (status EQ TRUE)
     {
      g_sihSysInfo1ConfigSetReqProcessed = TRUE;
      g_sihSysInfo1ConfigGetReqProcessed = FALSE;
      /* free the resources */      
      free_sysInfo1ConfigTable(); 
     }
   return status;
}


/** Initializes the sysInfo1Config module */
void
init_sysInfo1Config(void)
{
  /* here we initialize all the tables we're planning on supporting */
    initialize_table_sysInfo1ConfigTable();
}

/*  # Determine the first/last column names */

/** Initialize the sysInfo1ConfigTable table by defining its contents and how it's structured */
void
initialize_table_sysInfo1ConfigTable(void)
{
    const oid sysInfo1ConfigTable_oid[] = {1,3,6,1,4,1,9344,501,SYSINFO1CONFIG,1};
    const size_t sysInfo1ConfigTable_oid_len   = OID_LENGTH(sysInfo1ConfigTable_oid);
    netsnmp_handler_registration    *reg;
    netsnmp_iterator_info           *iinfo;
    netsnmp_table_registration_info *table_info;

    DEBUGMSGTL(("sysInfo1Config:init", "initializing table sysInfo1ConfigTable\n"));

    reg = netsnmp_create_handler_registration(
              "sysInfo1ConfigTable",     sysInfo1ConfigTable_handler,
              sysInfo1ConfigTable_oid, sysInfo1ConfigTable_oid_len,
              HANDLER_CAN_RWRITE
              );

    table_info = SNMP_MALLOC_TYPEDEF( netsnmp_table_registration_info );
    netsnmp_table_helper_add_indexes(table_info,
                           ASN_UNSIGNED,  /* index: sysInfo1ProfileId */
                           0);
    table_info->min_column = COLUMN_SYSINFO1PROFILEID;
    table_info->max_column = COLUMN_SIWINDOWLENGTH;
    
    iinfo = SNMP_MALLOC_TYPEDEF( netsnmp_iterator_info );
    iinfo->get_first_data_point = sysInfo1ConfigTable_get_first_data_point;
    iinfo->get_next_data_point  = sysInfo1ConfigTable_get_next_data_point;
    iinfo->table_reginfo        = table_info;
    
    netsnmp_register_table_iterator( reg, iinfo );

    /* Initialise the contents of the table here */
}


#ifndef PWAV_SIH
/* create a new row in the (unsorted) table */
struct sysInfo1ConfigTable_entry *
sysInfo1ConfigTable_createEntry(
                 u_long  sysInfo1ProfileId,
                ) {
    struct sysInfo1ConfigTable_entry *entry;

    entry = SNMP_MALLOC_TYPEDEF(struct sysInfo1ConfigTable_entry);
    if (!entry)
        return NULL;

    entry->sysInfo1ProfileId = sysInfo1ProfileId;
    entry->next = sysInfo1ConfigTable_head;
    sysInfo1ConfigTable_head = entry;
    return entry;
}

/* remove a row from the table */
void
sysInfo1ConfigTable_removeEntry( struct sysInfo1ConfigTable_entry *entry ) {
    struct sysInfo1ConfigTable_entry *ptr, *prev;

    if (!entry)
        return;    /* Nothing to remove */

    for ( ptr  = sysInfo1ConfigTable_head, prev = NULL;
          ptr != NULL;
          prev = ptr, ptr = ptr->next ) {
        if ( ptr == entry )
            break;
    }
    if ( !ptr )
        return;    /* Can't find it */

    if ( prev == NULL )
        sysInfo1ConfigTable_head = ptr->next;
    else
        prev->next = ptr->next;

    SNMP_FREE( entry );   /* XXX - release any other internal resources */
}
#endif /* PWAV_SIH */


/* Example iterator hook routines - using 'get_next' to do most of the work */
netsnmp_variable_list *
sysInfo1ConfigTable_get_first_data_point(void **my_loop_context,
                          void **my_data_context,
                          netsnmp_variable_list *put_index_data,
                          netsnmp_iterator_info *mydata)
{
    TagInfo sihTagInfo;
    TBOOL status = FALSE;

    if (g_sihSysInfo1ConfigGetReqProcessed EQ FALSE)
        {
        /* Set SIH Get Request Tag Info */
        sihTagInfo.tableId = SYSINFO1CONFIG;
        sihTagInfo.rowId = CONFIG_ROW_ID_NONE; 
        sihTagInfo.colId = CONFIG_COL_ID_NONE;                

        status = sihGetProcessor (sihTagInfo);
        if ( status EQ TRUE )
            {
            logInfo("%s","Get Processor Succedded");
            if (sysInfo1ConfigTable_head)
                {
		g_sysInfo1ConfigFirstCall = 1;
                g_sihSysInfo1ConfigGetReqProcessed = TRUE;
                }
            }
        else
            logError("%s","Get Processor Failed");
        }     

    *my_loop_context = sysInfo1ConfigTable_head;
    return sysInfo1ConfigTable_get_next_data_point(my_loop_context, my_data_context,
                                    put_index_data,  mydata );
}

netsnmp_variable_list *
sysInfo1ConfigTable_get_next_data_point(void **my_loop_context,
                          void **my_data_context,
                          netsnmp_variable_list *put_index_data,
                          netsnmp_iterator_info *mydata)
{
    struct sysInfo1ConfigTable_entry *entry = (struct sysInfo1ConfigTable_entry *)*my_loop_context;
    netsnmp_variable_list *idx = put_index_data;

    if ( entry ) {
        snmp_set_var_typed_integer( idx, ASN_UNSIGNED, entry->sysInfo1ProfileId );
        idx = idx->next_variable;
        *my_data_context = (void *)entry;
        *my_loop_context = (void *)entry->next;
        return put_index_data;
    } else {
        return NULL;
    }
}


/** handles requests for the sysInfo1ConfigTable table */
int
sysInfo1ConfigTable_handler(
    netsnmp_mib_handler               *handler,
    netsnmp_handler_registration      *reginfo,
    netsnmp_agent_request_info        *reqinfo,
    netsnmp_request_info              *requests) {

    netsnmp_request_info       *request = NULL;
    netsnmp_table_request_info *table_info = NULL;
    struct sysInfo1ConfigTable_entry          *table_entry = NULL;
    int loopCount = 0;
    int ret;
    TagInfo sihTagInfo;
    TlvArray tlvArray;
    int rowIndex = 0, colId = 0;
    TBOOL status = FALSE;    

    DEBUGMSGTL(("sysInfo1Config:handler", "Processing request (%d)\n", reqinfo->mode));

    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
    case MODE_GET:
        for (request=requests; request; request=request->next) {

            loopCount++;
            if (request->processed != 0)
              {
	      g_prevSysInfo1ConfigReqCount = 0; 	
              /*Processed all requests, rows and colmns */
              g_sihSysInfo1ConfigGetReqProcessed = FALSE;
              /* free the resources */
              free_sysInfo1ConfigTable(); 
              /* Here loopCount is decremented, Due to calling of free function two times in SNMP-GETNEXT
               * on single parameter -- 20/07/11 */
              loopCount--;
              continue;
              }

            /* perform anything here that you need to do before each
               request is processed. */           

            /* the following extracts the my_data_context pointer set in
               the loop functions above.  You can then use the results to
               help return data for the columns of the sysInfo1ConfigTable table 
               in question */    

            table_entry = (struct sysInfo1ConfigTable_entry *)
                              netsnmp_extract_iterator_context(request);

            if ( table_entry == NULL) {
                if (reqinfo->mode == MODE_GET) {
                    netsnmp_set_request_error(reqinfo, request,SNMP_NOSUCHINSTANCE);
                    continue;
                }
                /* XXX: no row existed, if you support creation and this is a
                   set, start dealing with it here, else continue */
            }

            table_info  =     netsnmp_extract_table_info(request);

            /* table_info->colnum contains the column number requested */
            /* table_info->indexes contains a linked list of snmp variable
               bindings for the indexes of the table.  Values in the list
               have been set corresponding to the indexes of the
               request */
            if (table_info==NULL) {
                continue;
            }  
    
            switch (table_info->colnum) {
            case COLUMN_SYSINFO1PROFILEID:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->sysInfo1ProfileId);
                break;
            case COLUMN_INTRAFREQRESELECTION:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->intraFreqReselection);
                break;
            case COLUMN_QRXLEVMIN:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->qRxLevMin);
                break;
            case COLUMN_QRXLEVMINOFFSET:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->qRxLevMinOffset);
                break;
            case COLUMN_SIB2PERIODICITY:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->sib2Periodicity);
                break;
            case COLUMN_SIB3PERIODICITY:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->sib3Periodicity);
                break;
            case COLUMN_SIB4PERIODICITY:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->sib4Periodicity);
                break;
            case COLUMN_SIWINDOWLENGTH:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->siWindowLength);
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
	if(g_sysInfo1ConfigFirstCall EQ 1)
         {
            g_sysInfo1ConfigFirstCall = 0;
            g_prevSysInfo1ConfigReqCount = loopCount;
            // This will occur in case of, when SNMP-GET or SNMP-GETNEXT of Single Parameter occurred.
            // In the first call itself loopCount becomes one.
            // In General Case, the loopCount will be always > 1 because every table contains 
            // index column to fetch the row and remaining columns contain table attributes.
            if(loopCount EQ 1)
            {
               //Setting it to false in case of SNMP-GET request for single parameter.
               g_sihSysInfo1ConfigGetReqProcessed = FALSE;
               // Free all resources.
               free_sysInfo1ConfigTable();
            }
         }
         else if(loopCount > 1 || g_prevSysInfo1ConfigReqCount > 1)
         {
            //update g_prevReqCount with current loopCount for next call of Table_handler
            g_prevSysInfo1ConfigReqCount = loopCount;
         }
         else if(loopCount EQ 1)
         {
            //Setting it to false in case of SNMP-GET request for single parameter.
            g_sihSysInfo1ConfigGetReqProcessed = FALSE;
            // Free all resources.
            free_sysInfo1ConfigTable();
         }	
        break;

        /*
         * Write-support
         */
    case MODE_SET_RESERVE1:
#ifndef PWAV_SIH
        for (request=requests; request; request=request->next) {
            table_entry = (struct sysInfo1ConfigTable_entry *)
                              netsnmp_extract_iterator_context(request);
            table_info  =     netsnmp_extract_table_info(      request);
    
            switch (table_info->colnum) {
            case COLUMN_SYSINFO1PROFILEID:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_INTRAFREQRESELECTION:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_QRXLEVMIN:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_QRXLEVMINOFFSET:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SIB2PERIODICITY:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SIB3PERIODICITY:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SIB4PERIODICITY:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_SIWINDOWLENGTH:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            default:
                netsnmp_set_request_error( reqinfo, request,
                                           SNMP_ERR_NOTWRITABLE );
                return SNMP_ERR_NOERROR;
            }
        }
#endif /* PWAV_SIH */
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
        g_sihSysInfo1ConfigSetReqProcessed = FALSE; 

        clearBytes(&sihTagInfo, sizeof(TagInfo));
        clearBytes(&tlvArray, sizeof(TlvArray));
        
        for (request=requests; request; request=request->next) {
            table_entry = (struct sysInfo1ConfigTable_entry *)
                              netsnmp_extract_iterator_context(request);
            table_info  =     netsnmp_extract_table_info(      request);

            if(table_entry == NULL){
                logInfo(" %s\n", "table_entry is NULL");
                if (reqinfo->mode == MODE_SET_ACTION) {
                    netsnmp_set_request_error(reqinfo, request,SNMP_NOSUCHINSTANCE);
                    continue;
                }
                /* XXX: no row existed, if you support creation and this is a
                   set, start dealing with it here, else continue */
            }

            if(table_info == NULL){
                logInfo(" %s\n", "table_info is NULL");
                continue;
            }
    
            colId = table_info->colnum;
            /* set the row index */
            rowIndex = requests->index;

            switch (table_info->colnum) {
            case COLUMN_SYSINFO1PROFILEID:
                table_entry->sysInfo1ProfileId     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, SYSINFO1CONFIG, rowIndex, COLUMN_SYSINFO1PROFILEID);
                tlvArray.numTlvs++;
                break;
            case COLUMN_INTRAFREQRESELECTION:
                table_entry->intraFreqReselection     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, SYSINFO1CONFIG, rowIndex, COLUMN_INTRAFREQRESELECTION);
                tlvArray.numTlvs++;
                break;
            case COLUMN_QRXLEVMIN:
                table_entry->qRxLevMin     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, SYSINFO1CONFIG, rowIndex, COLUMN_QRXLEVMIN);
                tlvArray.numTlvs++;
                break;
            case COLUMN_QRXLEVMINOFFSET:
                table_entry->qRxLevMinOffset     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, SYSINFO1CONFIG, rowIndex, COLUMN_QRXLEVMINOFFSET);
                tlvArray.numTlvs++;
                break;
            case COLUMN_SIB2PERIODICITY:
                table_entry->sib2Periodicity     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, SYSINFO1CONFIG, rowIndex, COLUMN_SIB2PERIODICITY);
                tlvArray.numTlvs++;
                break;
            case COLUMN_SIB3PERIODICITY:
                table_entry->sib3Periodicity     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, SYSINFO1CONFIG, rowIndex, COLUMN_SIB3PERIODICITY);
                tlvArray.numTlvs++;
                break;
            case COLUMN_SIB4PERIODICITY:
                table_entry->sib4Periodicity     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, SYSINFO1CONFIG, rowIndex, COLUMN_SIB4PERIODICITY);
                tlvArray.numTlvs++;
                break;
            case COLUMN_SIWINDOWLENGTH:
                table_entry->siWindowLength     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, SYSINFO1CONFIG, rowIndex, COLUMN_SIWINDOWLENGTH);
                tlvArray.numTlvs++;
                break;
            }
        }

        if ((request == NULL) && (g_sihSysInfo1ConfigSetReqProcessed EQ FALSE))
            /* Processed all requests and table entry is filled with
             * requested data. */
            {
            /* Set SIH Set Request Tag Info */
            sihTagInfo.tableId = SYSINFO1CONFIG;

            sihTagInfo.rowId = rowIndex; 

            status = sendSysInfo1ConfigSnmpSetRequest (sihTagInfo, &tlvArray);
            if (status EQ TRUE)
                {
                logInfo("%s","SET Succedded");
                }
            else
                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_GENERR );
            }
        break;

    case MODE_SET_UNDO:
#ifndef PWAV_SIH
        for (request=requests; request; request=request->next) {
            table_entry = (struct sysInfo1ConfigTable_entry *)
                              netsnmp_extract_iterator_context(request);
            table_info  =     netsnmp_extract_table_info(      request);
    
            switch (table_info->colnum) {
            case COLUMN_SYSINFO1PROFILEID:
                table_entry->sysInfo1ProfileId     = table_entry->old_sysInfo1ProfileId;
                table_entry->old_sysInfo1ProfileId = 0;
                break;
            case COLUMN_INTRAFREQRESELECTION:
                table_entry->intraFreqReselection     = table_entry->old_intraFreqReselection;
                table_entry->old_intraFreqReselection = 0;
                break;
            case COLUMN_QRXLEVMIN:
                table_entry->qRxLevMin     = table_entry->old_qRxLevMin;
                table_entry->old_qRxLevMin = 0;
                break;
            case COLUMN_QRXLEVMINOFFSET:
                table_entry->qRxLevMinOffset     = table_entry->old_qRxLevMinOffset;
                table_entry->old_qRxLevMinOffset = 0;
                break;
            case COLUMN_SIB2PERIODICITY:
                table_entry->sib2Periodicity     = table_entry->old_sib2Periodicity;
                table_entry->old_sib2Periodicity = 0;
                break;
            case COLUMN_SIB3PERIODICITY:
                table_entry->sib3Periodicity     = table_entry->old_sib3Periodicity;
                table_entry->old_sib3Periodicity = 0;
                break;
            case COLUMN_SIB4PERIODICITY:
                table_entry->sib4Periodicity     = table_entry->old_sib4Periodicity;
                table_entry->old_sib4Periodicity = 0;
                break;
            case COLUMN_SIWINDOWLENGTH:
                table_entry->siWindowLength     = table_entry->old_siWindowLength;
                table_entry->old_siWindowLength = 0;
                break;
            }
        }
#endif /* PWAV_SIH */
        break;

    case MODE_SET_COMMIT:
        break;
    }
    return SNMP_ERR_NOERROR;
}
