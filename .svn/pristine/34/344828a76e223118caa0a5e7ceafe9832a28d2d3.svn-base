/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.iterate.conf 19302 2010-08-13 12:19:42Z dts12 $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

#include "bs_modules.h"
#include "all_cfg.h"
#include "all_cmn.h"
#include "tlv_enc_dec.h"

#include "sih.h"
#include "syslog.h"

#include "cellConfig.h"

Netsnmp_Node_Handler cellConfigTable_handler;
Netsnmp_First_Data_Point  cellConfigTable_get_first_data_point;
Netsnmp_Next_Data_Point   cellConfigTable_get_next_data_point;

struct cellConfigTable_entry  *cellConfigTable_head = NULL;
static TBOOL g_sihCellConfigSetReqProcessed = FALSE;
static TBOOL g_sihCellConfigGetReqProcessed = FALSE;
static UINT32 g_prevCellConfigReqCount = 0;
static UINT32 g_cellConfigFirstCall = 0;

/* free_cellConfigTable */
/**
* @details 
*          This is the routine which frees the cell config entry.
*/
void free_cellConfigTable(void)
{
  cellConfigTableEntry  * current = cellConfigTable_head;

  if (current)
  {
  for (current = cellConfigTable_head->next ; current != NULL; current = current->next) {
    SNMP_FREE( current );
    }

  SNMP_FREE(cellConfigTable_head);
  cellConfigTable_head = NULL;
  }
  return;
}

/**
* @details 
*          This is the routine which handles get response from SIH Get Processor
*          and prepare the SNMP GET response for EMS.
* @param tlvArray contains pointer to TLV array.
*/
TBOOL sendCellConfigSnmpGetResponse (
  IO TlvArray    *tlvArray
  )
{
  int  totalNumRow, totalNumCol, i=0, colmn=0;
  cellConfigTableEntry * prevPtr = NULL;

  printTLV(tlvArray);

  /* Total no. of Colmns */
  totalNumCol = CELL_CONFIG_MAX_COL;
  /* Total no. of Row = (No. of TLV)/(No. of Columns) */
  totalNumRow = tlvArray->numTlvs/totalNumCol;

  for (i=1;  i <= totalNumRow;  i++)
      {
      cellConfigTableEntry *ptr=(cellConfigTableEntry *)malloc(sizeof(cellConfigTableEntry));

      clearBytes(ptr,sizeof(cellConfigTableEntry));

      /* Fill Data in TLV */
      for(colmn = 1 ; colmn <= totalNumCol ; colmn++)
        {
       if (colmn EQ COLUMN_CELLID)
           {
            ptr->cellId = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_CELLTYPE)
           {
            ptr->cellType = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }	
       if (colmn EQ COLUMN_PLMNMCC)
           {
            clearBytes (ptr->plmnMCC, CELL_CONFIG_PLMN_MCC_MAX);
            if (tlvArray->tlvInfo[colmn-1].len > 0)
                {
                 copyBytes (tlvArray->tlvInfo[colmn-1].data, tlvArray->tlvInfo[colmn-1].len, ptr->plmnMCC);
                }
            ptr->plmnMCC_len = strlen(ptr->plmnMCC);
            continue;
           }
       if (colmn EQ COLUMN_PLMNMNC)
           {
            clearBytes (ptr->plmnMNC, CELL_CONFIG_PLMN_MNC_MAX);
            if (tlvArray->tlvInfo[colmn-1].len > 0)
                {
                 copyBytes (tlvArray->tlvInfo[colmn-1].data, tlvArray->tlvInfo[colmn-1].len, ptr->plmnMNC);
                }
            ptr->plmnMNC_len = strlen(ptr->plmnMNC);
            continue;
           }
        if (colmn EQ COLUMN_TAC)
           {
            ptr->tac = getUint16FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_FREQBANDIND)
           {
            ptr->freqBandInd = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_DLBANDWIDTH)
           {
            ptr->dlBandwidth = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_DLEARFCN)
           {
            ptr->dlEarfcn = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_ULBANDWIDTH)
           {
            ptr->ulBandwidth = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_ULEARFCN)
           {
            ptr->ulEarfcn = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_CELLRESERVEDFOROPERATORUSE)
           {
            ptr->cellReservedForOperatorUse = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_MAXCONNECTEDUES)
           {
            ptr->maxConnectedUes = getUint16FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_ACBARRINGEMERGENCY)
           {
            ptr->acBarringEmergency = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_ACBARRMOSIGENABLED)
           {
            ptr->acBarrMoSigEnabled = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_ACBARRMOSIGFACTOR)
           {
            ptr->acBarrMoSigFactor = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_ACBARRMOSIGTIME)
           {
            ptr->acBarrMoSigTime = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_ACBARRMOSIGSPECIALAC)
           {
            clearBytes (ptr->acBarrMoSigSpecialAC, CELL_CONFIG_AC_BAR_MOSIG_MAX);
            if (tlvArray->tlvInfo[colmn-1].len > 0)
                {
                 copyBytes (tlvArray->tlvInfo[colmn-1].data, tlvArray->tlvInfo[colmn-1].len, ptr->acBarrMoSigSpecialAC);
                }
            ptr->acBarrMoSigSpecialAC_len = strlen(ptr->acBarrMoSigSpecialAC);
            continue;
           }
       if (colmn EQ COLUMN_ACBARRMODATAENABLED)
           {
            ptr->acBarrMoDataEnabled = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_ACBARRMODATAFACTOR)
           {
            ptr->acBarrMoDataFactor = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_ACBARRMODATATIME)
           {
            ptr->acBarrMoDataTime = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_ACBARRMODATASPECIALAC)
           {
            clearBytes (ptr->acBarrMoDataSpecialAC, CELL_CONFIG_AC_BAR_MODATA_MAX);
            if (tlvArray->tlvInfo[colmn-1].len > 0)
                {
                 copyBytes (tlvArray->tlvInfo[colmn-1].data, tlvArray->tlvInfo[colmn-1].len, ptr->acBarrMoDataSpecialAC);
                }
            ptr->acBarrMoDataSpecialAC_len = strlen(ptr->acBarrMoDataSpecialAC);
            continue;
           }
        if (colmn EQ COLUMN_STARTRNTI)
           {
            ptr->startRnti = getUint16FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_RSRPFILTERCOEFFICIENT)
           {
            ptr->rsrpFilterCoefficient = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_CELL_SCHEDULERPROFILEID)
           {
            ptr->schedulerProfileId = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_CELL_PHYPROFILEID)
           {
            ptr->phyProfileId = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_PHYSICALCELLID)
           {
            ptr->physicalCellId = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_PHYSICALCELLGROUPID)
           {
            ptr->physicalCellGroupId = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_PMAX)
           {
            ptr->pMax = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_UERESPONSETIMER)
           {
            ptr->ueResponseTimer = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_RRCCONNREJWAITTIME)
           {
            ptr->rrcConnRejWaitTime = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_UEINACTIVITYCHECKINTERVALSECS)
           {
            ptr->ueInactivityCheckInterval_secs = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_CELL_SYSINFO1PROFILEID)
           {
            ptr->sysInfo1ProfileId = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_CELL_SYSINFO2PROFILEID)
           {
            ptr->sysInfo2ProfileId = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_CELL_SYSINFO3PROFILEID)
           {
            ptr->sysInfo3ProfileId = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_CELL_SIRETXCNT)
           {
            ptr->siReTxCnt = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_CELL_ANTINFOTXMODE)
           {
            ptr->antInfoTxMode = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_CELL_INITIALULCQI)
           {
            ptr->initialUlCqi = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_CELL_PUCCHRESOURCESIZE)
           {
            ptr->pucchResourceSize = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_CELL_CQIPERIODICITYINDEX)
           {
            ptr->cqiPeriodicityIndex = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_CELL_SRIPERIODICITYINDEX)
           {
            ptr->sriPeriodicityIndex = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_CELL_UECQIBASEDRLFDETECTIONTIMER)
           {
            ptr->ueCqiBasedRlfDetectionTimer = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        if (colmn EQ COLUMN_CELL_UECFGMACCOLLATEDCQICOUNT)
           {
            ptr->ueCfgMacCollatedCqiCount = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        }

       ptr->next = NULL;

       if (prevPtr == NULL) {
           cellConfigTable_head =  prevPtr = ptr;
       }

      prevPtr->next = ptr;
      prevPtr = ptr;
     }
    prevPtr->next = NULL;

    if (cellConfigTable_head)
        return TRUE;
    else
        return FALSE;
}


/**
* @details 
*          This routine sends enodeb config set request to BSM, it uses SIH Set
*          Processor to create and send the message to BSM.
* @param sihTagInfo is used to have the tag information for set request.
*/
TBOOL sendCellConfigSnmpSetRequest (
      IO TagInfo  sihTagInfo,
      IO TlvArray *tlvArray
      )
{
   cellConfigTableEntry * setReqData = NULL;
   TBOOL status = FALSE;
   int colmn = 0, maxCols = 0;

   setReqData = cellConfigTable_head;

  /* max columns in row */
   maxCols = CELL_CONFIG_MAX_COL;

   /* Fill Data in TLV */
    for(colmn = 0; colmn < tlvArray->numTlvs; colmn++)
    {
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_CELLID)
         {
           putUint32InArray( setReqData->cellId, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->cellId);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId  EQ COLUMN_CELLTYPE)
         {
           putUint32InArray( setReqData->cellType, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->cellType);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_PLMNMCC)
         {
           copyBytes (setReqData->plmnMCC, strlen(setReqData->plmnMCC), tlvArray->tlvInfo[colmn].data);
           tlvArray->tlvInfo[colmn].len = CELL_CONFIG_PLMN_MCC_MAX;
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_PLMNMNC)
         {
           copyBytes (setReqData->plmnMNC, strlen(setReqData->plmnMNC), tlvArray->tlvInfo[colmn].data);
           tlvArray->tlvInfo[colmn].len = CELL_CONFIG_PLMN_MNC_MAX;
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_TAC)
         {
           putUint16InArray( setReqData->tac, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->tac);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_FREQBANDIND)
         {
           putUint8InArray( setReqData->freqBandInd, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->freqBandInd);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_DLBANDWIDTH)
         {
           putUint32InArray( setReqData->dlBandwidth, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->dlBandwidth);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_DLEARFCN)
         {
           putUint32InArray( setReqData->dlEarfcn, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->dlEarfcn);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_ULBANDWIDTH)
         {
           putUint32InArray( setReqData->ulBandwidth, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->ulBandwidth);
         }
         if(sihTagInfo.colId EQ COLUMN_ULEARFCN)
         {
           putUint32InArray( setReqData->ulEarfcn, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->ulEarfcn);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_CELLRESERVEDFOROPERATORUSE)
         {
           putUint32InArray( setReqData->cellReservedForOperatorUse, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->cellReservedForOperatorUse);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_MAXCONNECTEDUES)
         {
           putUint16InArray( setReqData->maxConnectedUes, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->maxConnectedUes);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_ACBARRINGEMERGENCY)
         {
           putUint8InArray( setReqData->acBarringEmergency, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->acBarringEmergency);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_ACBARRMOSIGENABLED)
         {
           putUint8InArray( setReqData->acBarrMoSigEnabled, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->acBarrMoSigEnabled);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_ACBARRMOSIGFACTOR)
         {
           putUint32InArray( setReqData->acBarrMoSigFactor, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->acBarrMoSigFactor);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_ACBARRMOSIGTIME)
         {
           putUint32InArray( setReqData->acBarrMoSigTime, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->acBarrMoSigTime);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_ACBARRMOSIGSPECIALAC)
         {
           copyBytes (setReqData->acBarrMoSigSpecialAC, strlen(setReqData->acBarrMoSigSpecialAC), tlvArray->tlvInfo[colmn].data);
           tlvArray->tlvInfo[colmn].len = CELL_CONFIG_AC_BAR_MOSIG_MAX;
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_ACBARRMODATAENABLED)
         {
           putUint8InArray( setReqData->acBarrMoDataEnabled, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->acBarrMoDataEnabled);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_ACBARRMODATAFACTOR)
         {
           putUint32InArray( setReqData->acBarrMoDataFactor, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->acBarrMoDataFactor);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_ACBARRMODATATIME)
         {
           putUint32InArray( setReqData->acBarrMoDataTime, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->acBarrMoDataTime);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_ACBARRMODATASPECIALAC)
         {
           copyBytes (setReqData->acBarrMoDataSpecialAC, strlen(setReqData->acBarrMoDataSpecialAC), tlvArray->tlvInfo[colmn].data);
           tlvArray->tlvInfo[colmn].len = CELL_CONFIG_AC_BAR_MODATA_MAX;
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_STARTRNTI)
         {
           putUint16InArray( setReqData->startRnti, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->startRnti);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_RSRPFILTERCOEFFICIENT)
         {
           putUint32InArray( setReqData->rsrpFilterCoefficient, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->rsrpFilterCoefficient);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_CELL_SCHEDULERPROFILEID)
         {
           putUint8InArray( setReqData->schedulerProfileId, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->schedulerProfileId);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_CELL_PHYPROFILEID)
         {
           putUint8InArray( setReqData->phyProfileId, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->phyProfileId);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_PHYSICALCELLID)
         {
           putUint8InArray( setReqData->physicalCellId, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->physicalCellId);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_PHYSICALCELLGROUPID)
         {
           putUint8InArray( setReqData->physicalCellGroupId, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->physicalCellGroupId);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_PMAX)
         {
           putUint8InArray( setReqData->pMax, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->pMax);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_UERESPONSETIMER)
         {
           putUint32InArray( setReqData->ueResponseTimer, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->ueResponseTimer);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_RRCCONNREJWAITTIME)
         {
           putUint8InArray( setReqData->rrcConnRejWaitTime, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->rrcConnRejWaitTime);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_UEINACTIVITYCHECKINTERVALSECS)
         {
           putUint32InArray( setReqData->ueInactivityCheckInterval_secs, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->ueInactivityCheckInterval_secs);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_CELL_SYSINFO1PROFILEID)
         {
           putUint8InArray( setReqData->sysInfo1ProfileId, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->sysInfo1ProfileId);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_CELL_SYSINFO2PROFILEID)
         {
           putUint8InArray( setReqData->sysInfo2ProfileId, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->sysInfo2ProfileId);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_CELL_SYSINFO3PROFILEID)
         {
           putUint8InArray( setReqData->sysInfo3ProfileId, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->sysInfo3ProfileId);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_CELL_SIRETXCNT)
         {
           putUint8InArray( setReqData->siReTxCnt, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->siReTxCnt);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_CELL_ANTINFOTXMODE)
         {
           putUint32InArray( setReqData->antInfoTxMode, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->antInfoTxMode);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_CELL_INITIALULCQI)
         {
           putUint8InArray( setReqData->initialUlCqi, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->initialUlCqi);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_CELL_PUCCHRESOURCESIZE)
         {
           putUint8InArray( setReqData->pucchResourceSize, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->pucchResourceSize);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_CELL_CQIPERIODICITYINDEX)
         {
           putUint32InArray( setReqData->cqiPeriodicityIndex, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->cqiPeriodicityIndex);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_CELL_SRIPERIODICITYINDEX)
         {
           putUint32InArray( setReqData->sriPeriodicityIndex, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->sriPeriodicityIndex);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_CELL_UECQIBASEDRLFDETECTIONTIMER)
         {
           putUint32InArray( setReqData->ueCqiBasedRlfDetectionTimer, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->ueCqiBasedRlfDetectionTimer);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_CELL_UECFGMACCOLLATEDCQICOUNT)
         {
           putUint8InArray( setReqData->ueCfgMacCollatedCqiCount, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->ueCfgMacCollatedCqiCount);
         }
    }

   /* Invoke SIH Set Processor */
   status = sihSetProcessor (sihTagInfo,  tlvArray);
   if (status EQ TRUE)
     {
      g_sihCellConfigSetReqProcessed = TRUE;
      g_sihCellConfigGetReqProcessed = FALSE;
      /* free the resources */
      free_cellConfigTable();
     }
   return status;
}


/** Initializes the cellConfig module */
void
init_cellConfig(void)
{
  /* here we initialize all the tables we're planning on supporting */
    initialize_table_cellConfigTable();
}

/*  # Determine the first/last column names */

/** Initialize the cellConfigTable table by defining its contents and how it's structured */
void
initialize_table_cellConfigTable(void)
{
    const oid cellConfigTable_oid[] = {1,3,6,1,4,1,9344,501,CELLCONFIG,1};
    const size_t cellConfigTable_oid_len   = OID_LENGTH(cellConfigTable_oid);
    netsnmp_handler_registration    *reg;
    netsnmp_iterator_info           *iinfo;
    netsnmp_table_registration_info *table_info;

    DEBUGMSGTL(("cellConfig:init", "initializing table cellConfigTable\n"));

    reg = netsnmp_create_handler_registration(
              "cellConfigTable",     cellConfigTable_handler,
              cellConfigTable_oid, cellConfigTable_oid_len,
              HANDLER_CAN_RWRITE
              );

    table_info = SNMP_MALLOC_TYPEDEF( netsnmp_table_registration_info );
    netsnmp_table_helper_add_indexes(table_info,
                           ASN_UNSIGNED,  /* index: cellId */
                           0);
    table_info->min_column = COLUMN_CELLID;
    table_info->max_column = CELL_CONFIG_MAX_COL;
    
    iinfo = SNMP_MALLOC_TYPEDEF( netsnmp_iterator_info );
    iinfo->get_first_data_point = cellConfigTable_get_first_data_point;
    iinfo->get_next_data_point  = cellConfigTable_get_next_data_point;
    iinfo->table_reginfo        = table_info;
    
    netsnmp_register_table_iterator( reg, iinfo );

    /* Initialise the contents of the table here */
}


#ifndef PWAV_SIH
/* create a new row in the (unsorted) table */
struct cellConfigTable_entry *
cellConfigTable_createEntry(
                 u_long  cellId,
                ) {
    struct cellConfigTable_entry *entry;

    entry = SNMP_MALLOC_TYPEDEF(struct cellConfigTable_entry);
    if (!entry)
        return NULL;

    entry->cellId = cellId;
    entry->next = cellConfigTable_head;
    cellConfigTable_head = entry;
    return entry;
}

/* remove a row from the table */
void
cellConfigTable_removeEntry( struct cellConfigTable_entry *entry ) {
    struct cellConfigTable_entry *ptr, *prev;

    if (!entry)
        return;    /* Nothing to remove */

    for ( ptr  = cellConfigTable_head, prev = NULL;
          ptr != NULL;
          prev = ptr, ptr = ptr->next ) {
        if ( ptr == entry )
            break;
    }
    if ( !ptr )
        return;    /* Can't find it */

    if ( prev == NULL )
        cellConfigTable_head = ptr->next;
    else
        prev->next = ptr->next;

    SNMP_FREE( entry );   /* XXX - release any other internal resources */
}
#endif /* PWAV_SIH */


/* Example iterator hook routines - using 'get_next' to do most of the work */
netsnmp_variable_list *
cellConfigTable_get_first_data_point(void **my_loop_context,
                          void **my_data_context,
                          netsnmp_variable_list *put_index_data,
                          netsnmp_iterator_info *mydata)
{
    TagInfo sihTagInfo;
    TBOOL status = FALSE;

    if (g_sihCellConfigGetReqProcessed EQ FALSE)
        {
        /* Set SIH Get Request Tag Info */
        sihTagInfo.tableId = CELLCONFIG;
        sihTagInfo.rowId = CONFIG_ROW_ID_NONE;
        sihTagInfo.colId = CONFIG_COL_ID_NONE;

        status = sihGetProcessor (sihTagInfo);
        if ( status EQ TRUE )
            {
            logInfo("%s","Get Processor Succedded");
            if (cellConfigTable_head)
                {
		          g_cellConfigFirstCall = 1;
                  g_sihCellConfigGetReqProcessed = TRUE;
                }
            }
        else
            logError("%s","Get Processor Failed");
        }

    *my_loop_context = cellConfigTable_head;
    return cellConfigTable_get_next_data_point(my_loop_context, my_data_context,
                                    put_index_data,  mydata );
}

netsnmp_variable_list *
cellConfigTable_get_next_data_point(void **my_loop_context,
                          void **my_data_context,
                          netsnmp_variable_list *put_index_data,
                          netsnmp_iterator_info *mydata)
{
    struct cellConfigTable_entry *entry = (struct cellConfigTable_entry *)*my_loop_context;
    netsnmp_variable_list *idx = put_index_data;

    if ( entry ) {
        snmp_set_var_typed_integer( idx, ASN_UNSIGNED, entry->cellId );
        idx = idx->next_variable;
        *my_data_context = (void *)entry;
        *my_loop_context = (void *)entry->next;
        return put_index_data;
    } else {
        return NULL;
    }
}


/** handles requests for the cellConfigTable table */
int
cellConfigTable_handler(
    netsnmp_mib_handler               *handler,
    netsnmp_handler_registration      *reginfo,
    netsnmp_agent_request_info        *reqinfo,
    netsnmp_request_info              *requests) {

    netsnmp_request_info       *request = NULL;
    netsnmp_table_request_info *table_info = NULL;
    struct cellConfigTable_entry          *table_entry = NULL;
    int loopCount = 0;
    int ret;
    TagInfo sihTagInfo;
    TlvArray tlvArray;
    int rowIndex = 0, colId = 0;
    TBOOL status = FALSE;

    DEBUGMSGTL(("cellConfig:handler", "Processing request (%d)\n", reqinfo->mode));

    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
    case MODE_GET:
        for (request=requests; request; request=request->next) {

            loopCount++;
            if (request->processed != 0)
            {
	     g_prevCellConfigReqCount = 0;
             g_sihCellConfigGetReqProcessed = FALSE;

             /* free the resources */
             free_cellConfigTable();
             /* Here loopCount is decremented, Due to calling of free function two times in SNMP-GETNEXT
              * on single parameter -- 20/07/11 */
             loopCount--;
             continue;
            }

            /* perform anything here that you need to do before each
               request is processed. */

            /* the following extracts the my_data_context pointer set in
               the loop functions above.  You can then use the results to
               help return data for the columns of the enbRegConfigTable table
               in question */

            table_entry = (struct cellConfigTable_entry *)
                              netsnmp_extract_iterator_context(request);

            if ( table_entry == NULL) {
                if (reqinfo->mode == MODE_GET) {
                    netsnmp_set_request_error(reqinfo, request,SNMP_NOSUCHINSTANCE);
                    continue;
                }
                /* XXX: no row existed, if you support creation and this is a
                   set, start dealing with it here, else continue */
            }

            table_info  =     netsnmp_extract_table_info(request);
    
            switch (table_info->colnum) {
            case COLUMN_CELLID:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->cellId);
                break;
            case COLUMN_CELLTYPE:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->cellType);
                break;
            case COLUMN_PLMNMCC:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value( request->requestvb, ASN_OCTET_STR,
                                          table_entry->plmnMCC,
                                          table_entry->plmnMCC_len);
                break;
            case COLUMN_PLMNMNC:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value( request->requestvb, ASN_OCTET_STR,
                                          table_entry->plmnMNC,
                                          table_entry->plmnMNC_len);
                break;
            case COLUMN_TAC:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->tac);
                break;
            case COLUMN_FREQBANDIND:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->freqBandInd);
                break;
            case COLUMN_DLBANDWIDTH:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->dlBandwidth);
                break;
            case COLUMN_DLEARFCN:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->dlEarfcn);
                break;
            case COLUMN_ULBANDWIDTH:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->ulBandwidth);
                break;
            case COLUMN_ULEARFCN:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->ulEarfcn);
                break;
            case COLUMN_CELLRESERVEDFOROPERATORUSE:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->cellReservedForOperatorUse);
                break;
            case COLUMN_MAXCONNECTEDUES:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->maxConnectedUes);
                break;
            case COLUMN_ACBARRINGEMERGENCY:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->acBarringEmergency);
                break;
            case COLUMN_ACBARRMOSIGENABLED:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->acBarrMoSigEnabled);
                break;
            case COLUMN_ACBARRMOSIGFACTOR:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->acBarrMoSigFactor);
                break;
            case COLUMN_ACBARRMOSIGTIME:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->acBarrMoSigTime);
                break;
            case COLUMN_ACBARRMOSIGSPECIALAC:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value( request->requestvb, ASN_OCTET_STR,
                                          table_entry->acBarrMoSigSpecialAC,
                                          table_entry->acBarrMoSigSpecialAC_len);
                break;
            case COLUMN_ACBARRMODATAENABLED:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->acBarrMoDataEnabled);
                break;
            case COLUMN_ACBARRMODATAFACTOR:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->acBarrMoDataFactor);
                break;
            case COLUMN_ACBARRMODATATIME:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->acBarrMoDataTime);
                break;
            case COLUMN_ACBARRMODATASPECIALAC:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_value( request->requestvb, ASN_OCTET_STR,
                                          table_entry->acBarrMoDataSpecialAC,
                                          table_entry->acBarrMoDataSpecialAC_len);
                break;
            case COLUMN_STARTRNTI:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->startRnti);
                break;
            case COLUMN_RSRPFILTERCOEFFICIENT:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->rsrpFilterCoefficient);
                break;
            case COLUMN_CELL_SCHEDULERPROFILEID:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->schedulerProfileId);
                break;
            case COLUMN_CELL_PHYPROFILEID:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->phyProfileId);
                break;
            case COLUMN_PHYSICALCELLID:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->physicalCellId);
                break;
            case COLUMN_PHYSICALCELLGROUPID:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->physicalCellGroupId);
                break;
            case COLUMN_PMAX:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->pMax);
                break;
            case COLUMN_UERESPONSETIMER:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->ueResponseTimer);
                break;
            case COLUMN_RRCCONNREJWAITTIME:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->rrcConnRejWaitTime);
                break;
            case COLUMN_UEINACTIVITYCHECKINTERVALSECS:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->ueInactivityCheckInterval_secs);
                break;
            case COLUMN_CELL_SYSINFO1PROFILEID:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->sysInfo1ProfileId);
                break;
            case COLUMN_CELL_SYSINFO2PROFILEID:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->sysInfo2ProfileId);
                break;
            case COLUMN_CELL_SYSINFO3PROFILEID:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->sysInfo3ProfileId);
                break;
            case COLUMN_CELL_SIRETXCNT:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->siReTxCnt);
                break;
            case COLUMN_CELL_ANTINFOTXMODE:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->antInfoTxMode);
                break;
            case COLUMN_CELL_INITIALULCQI:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->initialUlCqi);
                break;
            case COLUMN_CELL_PUCCHRESOURCESIZE:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->pucchResourceSize);
                break;
            case COLUMN_CELL_CQIPERIODICITYINDEX:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->cqiPeriodicityIndex);
                break;
            case COLUMN_CELL_SRIPERIODICITYINDEX:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->sriPeriodicityIndex);
                break;
            case COLUMN_CELL_UECQIBASEDRLFDETECTIONTIMER:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->ueCqiBasedRlfDetectionTimer);
                break;
            case COLUMN_CELL_UECFGMACCOLLATEDCQICOUNT:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->ueCfgMacCollatedCqiCount);
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
	if(g_cellConfigFirstCall EQ 1)
         {
            g_cellConfigFirstCall = 0;
            g_prevCellConfigReqCount = loopCount;
            // This will occur in case of, when SNMP-GET or SNMP-GETNEXT of Single Parameter occurred.
            // In the first call itself loopCount becomes one.
            // In General Case, the loopCount will be always > 1 because every table contains 
            // index column to fetch the row and remaining columns contain table attributes.
            if(loopCount EQ 1)
            {
               //Setting it to false in case of SNMP-GET request for single parameter.
               g_sihCellConfigGetReqProcessed = FALSE;
               // Free all resources.
               free_cellConfigTable();
            }
         }
         else if(loopCount > 1 || g_prevCellConfigReqCount > 1)
         {
            //update g_prevReqCount with current loopCount for next call of Table_handler
            g_prevCellConfigReqCount = loopCount;
         }
         else if(loopCount EQ 1)
         {
            //Setting it to false in case of SNMP-GET request for single parameter.
            g_sihCellConfigGetReqProcessed = FALSE;
            // Free all resources.
            free_cellConfigTable();
         }
        break;

        /*
         * Write-support
         */
    case MODE_SET_RESERVE1:
#ifndef PWAV_SIH
        for (request=requests; request; request=request->next) {
            table_entry = (struct cellConfigTable_entry *)
                              netsnmp_extract_iterator_context(request);
            table_info  =     netsnmp_extract_table_info(      request);
    
            switch (table_info->colnum) {
            case COLUMN_CELLID:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_CELLTYPE:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_PLMNMCC:
	        /* or possibly 'netsnmp_check_vb_type_and_size' */
                ret = netsnmp_check_vb_type_and_max_size(
                          request->requestvb, ASN_OCTET_STR, sizeof(table_entry->plmnMCC));
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_PLMNMNC:
	        /* or possibly 'netsnmp_check_vb_type_and_size' */
                ret = netsnmp_check_vb_type_and_max_size(
                          request->requestvb, ASN_OCTET_STR, sizeof(table_entry->plmnMNC));
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_TAC:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_FREQBANDIND:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_DLBANDWIDTH:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_DLEARFCN:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_ULBANDWIDTH:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_ULEARFCN:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_CELLRESERVEDFOROPERATORUSE:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_MAXCONNECTEDUES:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_ACBARRINGEMERGENCY:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_ACBARRMOSIGENABLED:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_ACBARRMOSIGFACTOR:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_ACBARRMOSIGTIME:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_ACBARRMOSIGSPECIALAC:
	        /* or possibly 'netsnmp_check_vb_type_and_size' */
                ret = netsnmp_check_vb_type_and_max_size(
                          request->requestvb, ASN_OCTET_STR, sizeof(table_entry->acBarrMoSigSpecialAC));
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_ACBARRMODATAENABLED:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_ACBARRMODATAFACTOR:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_ACBARRMODATATIME:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_ACBARRMODATASPECIALAC:
	        /* or possibly 'netsnmp_check_vb_type_and_size' */
                ret = netsnmp_check_vb_type_and_max_size(
                          request->requestvb, ASN_OCTET_STR, sizeof(table_entry->acBarrMoDataSpecialAC));
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_STARTRNTI:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_RSRPFILTERCOEFFICIENT:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_CELL_SCHEDULERPROFILEID:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_CELL_PHYPROFILEID:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_PHYSICALCELLID:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_PHYSICALCELLGROUPID:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_PMAX:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_NUMANTENNAPORTS:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_CELL_SYSINFO1PROFILEID:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_CELL_SYSINFO2PROFILEID:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            default:
                netsnmp_set_request_error( reqinfo, request,
                                           SNMP_ERR_NOTWRITABLE );
                return SNMP_ERR_NOERROR;
            }
        }
#endif /* PWAV_SIH */
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
	g_sihCellConfigSetReqProcessed = FALSE;

        clearBytes(&sihTagInfo, sizeof(TagInfo));
        clearBytes(&tlvArray, sizeof(TlvArray));

        for (request=requests; request; request=request->next) {
            table_entry = (struct cellConfigTable_entry *)
                              netsnmp_extract_iterator_context(request);
            table_info  =     netsnmp_extract_table_info(      request);

            if(table_entry == NULL){
                logInfo(" %s\n", "table_entry is NULL");
                if (reqinfo->mode == MODE_SET_ACTION) {
                    netsnmp_set_request_error(reqinfo, request,SNMP_NOSUCHINSTANCE);
                    continue;
                }
                /* XXX: no row existed, if you support creation and this is a
                   set, start dealing with it here, else continue */
            }

            if(table_info == NULL){
                logInfo(" %s\n", "table_info is NULL");
                continue;
            }

            colId = table_info->colnum;
            /* set the row index */
            rowIndex = requests->index;
    
            switch (table_info->colnum) {
            case COLUMN_CELLID:
                table_entry->cellId     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_CELLID);
                tlvArray.numTlvs++;
                break;
            case COLUMN_CELLTYPE:
                table_entry->cellType     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_CELLTYPE);
                tlvArray.numTlvs++;
                break;
            case COLUMN_PLMNMCC:
                memset( table_entry->plmnMCC, 0,
                        sizeof(table_entry->plmnMCC));
                memcpy( table_entry->plmnMCC,
                        request->requestvb->val.string,
                        request->requestvb->val_len);
                table_entry->plmnMCC_len =
                        request->requestvb->val_len;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_PLMNMCC);
                tlvArray.numTlvs++;
                break;
            case COLUMN_PLMNMNC:
                memset( table_entry->plmnMNC, 0,
                        sizeof(table_entry->plmnMNC));
                memcpy( table_entry->plmnMNC,
                        request->requestvb->val.string,
                        request->requestvb->val_len);
                table_entry->plmnMNC_len =
                        request->requestvb->val_len;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_PLMNMNC);
                tlvArray.numTlvs++;
                break;
            case COLUMN_TAC:
                table_entry->tac     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_TAC);
                tlvArray.numTlvs++;
                break;
            case COLUMN_FREQBANDIND:
                table_entry->freqBandInd     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_FREQBANDIND);
                tlvArray.numTlvs++;
                break;
            case COLUMN_DLBANDWIDTH:
                table_entry->dlBandwidth     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_DLBANDWIDTH);
                tlvArray.numTlvs++;
                break;
            case COLUMN_DLEARFCN:
                table_entry->dlEarfcn     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_DLEARFCN);
                tlvArray.numTlvs++;
                break;
            case COLUMN_ULBANDWIDTH:
                table_entry->ulBandwidth     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_ULBANDWIDTH);
                tlvArray.numTlvs++;
                break;
            case COLUMN_ULEARFCN:
                table_entry->ulEarfcn     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_ULEARFCN);
                tlvArray.numTlvs++;
                break;
            case COLUMN_CELLRESERVEDFOROPERATORUSE:
                table_entry->cellReservedForOperatorUse     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_CELLRESERVEDFOROPERATORUSE);
                tlvArray.numTlvs++;
                break;
            case COLUMN_MAXCONNECTEDUES:
                table_entry->maxConnectedUes     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_MAXCONNECTEDUES);
                tlvArray.numTlvs++;
                break;
            case COLUMN_ACBARRINGEMERGENCY:
                table_entry->acBarringEmergency     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_ACBARRINGEMERGENCY);
                tlvArray.numTlvs++;
                break;
            case COLUMN_ACBARRMOSIGENABLED:
                table_entry->acBarrMoSigEnabled     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_ACBARRMOSIGENABLED);
                tlvArray.numTlvs++;
                break;
            case COLUMN_ACBARRMOSIGFACTOR:
                table_entry->acBarrMoSigFactor     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_ACBARRMOSIGFACTOR);
                tlvArray.numTlvs++;
                break;
            case COLUMN_ACBARRMOSIGTIME:
                table_entry->acBarrMoSigTime     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_ACBARRMOSIGTIME);
                tlvArray.numTlvs++;
                break;
            case COLUMN_ACBARRMOSIGSPECIALAC:
                memset( table_entry->acBarrMoSigSpecialAC, 0,
                        sizeof(table_entry->acBarrMoSigSpecialAC));
                memcpy( table_entry->acBarrMoSigSpecialAC,
                        request->requestvb->val.string,
                        request->requestvb->val_len);
                table_entry->acBarrMoSigSpecialAC_len =
                        request->requestvb->val_len;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_ACBARRMOSIGSPECIALAC);
                tlvArray.numTlvs++;
                break;
            case COLUMN_ACBARRMODATAENABLED:
                table_entry->acBarrMoDataEnabled     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_ACBARRMODATAENABLED);
                tlvArray.numTlvs++;
                break;
            case COLUMN_ACBARRMODATAFACTOR:
                table_entry->acBarrMoDataFactor     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_ACBARRMODATAFACTOR);
                tlvArray.numTlvs++;
                break;
            case COLUMN_ACBARRMODATATIME:
                table_entry->acBarrMoDataTime     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_ACBARRMODATATIME);
                tlvArray.numTlvs++;
                break;
            case COLUMN_ACBARRMODATASPECIALAC:
                memset( table_entry->acBarrMoDataSpecialAC, 0,
                        sizeof(table_entry->acBarrMoDataSpecialAC));
                memcpy( table_entry->acBarrMoDataSpecialAC,
                        request->requestvb->val.string,
                        request->requestvb->val_len);
                table_entry->acBarrMoDataSpecialAC_len =
                        request->requestvb->val_len;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_ACBARRMODATASPECIALAC);
                tlvArray.numTlvs++;
                break;
            case COLUMN_STARTRNTI:
                table_entry->startRnti     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_STARTRNTI);
                tlvArray.numTlvs++;
                break;
            case COLUMN_RSRPFILTERCOEFFICIENT:
                table_entry->rsrpFilterCoefficient     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_RSRPFILTERCOEFFICIENT);
                tlvArray.numTlvs++;
                break;
            case COLUMN_CELL_SCHEDULERPROFILEID:
                table_entry->schedulerProfileId     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_CELL_SCHEDULERPROFILEID);
                tlvArray.numTlvs++;
                break;
            case COLUMN_CELL_PHYPROFILEID:
                table_entry->phyProfileId     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_CELL_PHYPROFILEID);
                tlvArray.numTlvs++;
                break;
            case COLUMN_PHYSICALCELLID:
                table_entry->physicalCellId     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_PHYSICALCELLID);
                tlvArray.numTlvs++;
                break;
            case COLUMN_PHYSICALCELLGROUPID:
                table_entry->physicalCellGroupId     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_PHYSICALCELLGROUPID);
                tlvArray.numTlvs++;
                break;
            case COLUMN_PMAX:
                table_entry->pMax     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_PMAX);
                tlvArray.numTlvs++;
                break;
            case COLUMN_UERESPONSETIMER:
                table_entry->ueResponseTimer     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_UERESPONSETIMER);
                tlvArray.numTlvs++;
                break;
            case COLUMN_RRCCONNREJWAITTIME:
                table_entry->rrcConnRejWaitTime     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_RRCCONNREJWAITTIME);
                tlvArray.numTlvs++;
                break;
            case COLUMN_UEINACTIVITYCHECKINTERVALSECS:
                table_entry->ueInactivityCheckInterval_secs  = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_UEINACTIVITYCHECKINTERVALSECS);
                tlvArray.numTlvs++;
                break;
            case COLUMN_CELL_SYSINFO1PROFILEID:
                table_entry->sysInfo1ProfileId     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_CELL_SYSINFO1PROFILEID);
                tlvArray.numTlvs++;
                break;
            case COLUMN_CELL_SYSINFO2PROFILEID:
                table_entry->sysInfo2ProfileId     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_CELL_SYSINFO2PROFILEID);
                tlvArray.numTlvs++;
                break;
            case COLUMN_CELL_SYSINFO3PROFILEID:
                table_entry->sysInfo3ProfileId     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_CELL_SYSINFO3PROFILEID);
                tlvArray.numTlvs++;
                break;
            case COLUMN_CELL_SIRETXCNT:
                table_entry->siReTxCnt     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_CELL_SIRETXCNT);
                tlvArray.numTlvs++;
                break;
            case COLUMN_CELL_ANTINFOTXMODE:
                table_entry->antInfoTxMode     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_CELL_ANTINFOTXMODE);
                tlvArray.numTlvs++;
                break;
            case COLUMN_CELL_INITIALULCQI:
                table_entry->initialUlCqi     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_CELL_INITIALULCQI);
                tlvArray.numTlvs++;
                break;
            case COLUMN_CELL_PUCCHRESOURCESIZE:
                table_entry->pucchResourceSize     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_CELL_PUCCHRESOURCESIZE);
                tlvArray.numTlvs++;
                break;
            case COLUMN_CELL_CQIPERIODICITYINDEX:
                table_entry->cqiPeriodicityIndex = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_CELL_CQIPERIODICITYINDEX);
                tlvArray.numTlvs++;
                break;
            case COLUMN_CELL_SRIPERIODICITYINDEX:
                table_entry->sriPeriodicityIndex = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_CELL_SRIPERIODICITYINDEX);
                tlvArray.numTlvs++;
                break;
            case COLUMN_CELL_UECQIBASEDRLFDETECTIONTIMER:
                table_entry->ueCqiBasedRlfDetectionTimer = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_CELL_UECQIBASEDRLFDETECTIONTIMER);
                tlvArray.numTlvs++;
                break;
            case COLUMN_CELL_UECFGMACCOLLATEDCQICOUNT:
                table_entry->ueCfgMacCollatedCqiCount     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, CELLCONFIG, rowIndex, COLUMN_CELL_UECFGMACCOLLATEDCQICOUNT);
                tlvArray.numTlvs++;
                break;
            }
        }

        if ((request == NULL) && (g_sihCellConfigSetReqProcessed EQ FALSE))
            /* Processed all requests and table entry is filled with
             * requested data. */
            {
            /* Set SIH Set Request Tag Info */
            sihTagInfo.tableId = CELLCONFIG;

            sihTagInfo.rowId = rowIndex;

            status = sendCellConfigSnmpSetRequest (sihTagInfo, &tlvArray);
            if (status EQ TRUE)
            {
                logInfo("%s","SET Succedded");
            }
            else
                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_GENERR );
            }

        break;

    case MODE_SET_UNDO:
#ifndef PWAV_SIH
        for (request=requests; request; request=request->next) {
            table_entry = (struct cellConfigTable_entry *)
                              netsnmp_extract_iterator_context(request);
            table_info  =     netsnmp_extract_table_info(      request);
    
            switch (table_info->colnum) {
            case COLUMN_CELLID:
                table_entry->cellId     = table_entry->old_cellId;
                table_entry->old_cellId = 0;
                break;
            case COLUMN_CELLTYPE:
                table_entry->cellType     = table_entry->old_cellType;
                table_entry->old_cellType = 0;
                break;
            case COLUMN_PLMNMCC:
                memcpy( table_entry->plmnMCC,
                        table_entry->old_plmnMCC,
                        sizeof(table_entry->plmnMCC));
                memset( table_entry->old_plmnMCC, 0,
                        sizeof(table_entry->plmnMCC));
                table_entry->plmnMCC_len =
                        table_entry->old_plmnMCC_len;
                break;
            case COLUMN_PLMNMNC:
                memcpy( table_entry->plmnMNC,
                        table_entry->old_plmnMNC,
                        sizeof(table_entry->plmnMNC));
                memset( table_entry->old_plmnMNC, 0,
                        sizeof(table_entry->plmnMNC));
                table_entry->plmnMNC_len =
                        table_entry->old_plmnMNC_len;
                break;
            case COLUMN_TAC:
                table_entry->tac     = table_entry->old_tac;
                table_entry->old_tac = 0;
                break;
            case COLUMN_FREQBANDIND:
                table_entry->freqBandInd     = table_entry->old_freqBandInd;
                table_entry->old_freqBandInd = 0;
                break;
            case COLUMN_DLBANDWIDTH:
                table_entry->dlBandwidth     = table_entry->old_dlBandwidth;
                table_entry->old_dlBandwidth = 0;
                break;
            case COLUMN_DLEARFCN:
                table_entry->dlEarfcn     = table_entry->old_dlEarfcn;
                table_entry->old_dlEarfcn = 0;
                break;
            case COLUMN_ULBANDWIDTH:
                table_entry->ulBandwidth     = table_entry->old_ulBandwidth;
                table_entry->old_ulBandwidth = 0;
                break;
            case COLUMN_ULEARFCN:
                table_entry->ulEarfcn     = table_entry->old_ulEarfcn;
                table_entry->old_ulEarfcn = 0;
                break;
            case COLUMN_CELLRESERVEDFOROPERATORUSE:
                table_entry->cellReservedForOperatorUse     = table_entry->old_cellReservedForOperatorUse;
                table_entry->old_cellReservedForOperatorUse = 0;
                break;
            case COLUMN_MAXCONNECTEDUES:
                table_entry->maxConnectedUes     = table_entry->old_maxConnectedUes;
                table_entry->old_maxConnectedUes = 0;
                break;
            case COLUMN_ACBARRINGEMERGENCY:
                table_entry->acBarringEmergency     = table_entry->old_acBarringEmergency;
                table_entry->old_acBarringEmergency = 0;
                break;
            case COLUMN_ACBARRMOSIGENABLED:
                table_entry->acBarrMoSigEnabled     = table_entry->old_acBarrMoSigEnabled;
                table_entry->old_acBarrMoSigEnabled = 0;
                break;
            case COLUMN_ACBARRMOSIGFACTOR:
                table_entry->acBarrMoSigFactor     = table_entry->old_acBarrMoSigFactor;
                table_entry->old_acBarrMoSigFactor = 0;
                break;
            case COLUMN_ACBARRMOSIGTIME:
                table_entry->acBarrMoSigTime     = table_entry->old_acBarrMoSigTime;
                table_entry->old_acBarrMoSigTime = 0;
                break;
            case COLUMN_ACBARRMOSIGSPECIALAC:
                memcpy( table_entry->acBarrMoSigSpecialAC,
                        table_entry->old_acBarrMoSigSpecialAC,
                        sizeof(table_entry->acBarrMoSigSpecialAC));
                memset( table_entry->old_acBarrMoSigSpecialAC, 0,
                        sizeof(table_entry->acBarrMoSigSpecialAC));
                table_entry->acBarrMoSigSpecialAC_len =
                        table_entry->old_acBarrMoSigSpecialAC_len;
                break;
            case COLUMN_ACBARRMODATAENABLED:
                table_entry->acBarrMoDataEnabled     = table_entry->old_acBarrMoDataEnabled;
                table_entry->old_acBarrMoDataEnabled = 0;
                break;
            case COLUMN_ACBARRMODATAFACTOR:
                table_entry->acBarrMoDataFactor     = table_entry->old_acBarrMoDataFactor;
                table_entry->old_acBarrMoDataFactor = 0;
                break;
            case COLUMN_ACBARRMODATATIME:
                table_entry->acBarrMoDataTime     = table_entry->old_acBarrMoDataTime;
                table_entry->old_acBarrMoDataTime = 0;
                break;
            case COLUMN_ACBARRMODATASPECIALAC:
                memcpy( table_entry->acBarrMoDataSpecialAC,
                        table_entry->old_acBarrMoDataSpecialAC,
                        sizeof(table_entry->acBarrMoDataSpecialAC));
                memset( table_entry->old_acBarrMoDataSpecialAC, 0,
                        sizeof(table_entry->acBarrMoDataSpecialAC));
                table_entry->acBarrMoDataSpecialAC_len =
                        table_entry->old_acBarrMoDataSpecialAC_len;
                break;
            case COLUMN_STARTRNTI:
                table_entry->startRnti     = table_entry->old_startRnti;
                table_entry->old_startRnti = 0;
                break;
            case COLUMN_RSRPFILTERCOEFFICIENT:
                table_entry->rsrpFilterCoefficient     = table_entry->old_rsrpFilterCoefficient;
                table_entry->old_rsrpFilterCoefficient = 0;
                break;
            case COLUMN_CELL_SCHEDULERPROFILEID:
                table_entry->schedulerProfileId     = table_entry->old_schedulerProfileId;
                table_entry->old_schedulerProfileId = 0;
                break;
            case COLUMN_CELL_PHYPROFILEID:
                table_entry->phyProfileId     = table_entry->old_phyProfileId;
                table_entry->old_phyProfileId = 0;
                break;
            case COLUMN_PHYSICALCELLID:
                table_entry->physicalCellId     = table_entry->old_physicalCellId;
                table_entry->old_physicalCellId = 0;
                break;
            case COLUMN_PHYSICALCELLGROUPID:
                table_entry->physicalCellGroupId     = table_entry->old_physicalCellGroupId;
                table_entry->old_physicalCellGroupId = 0;
                break;
            case COLUMN_PMAX:
                table_entry->pMax     = table_entry->old_pMax;
                table_entry->old_pMax = 0;
                break;
            case COLUMN_NUMANTENNAPORTS:
                table_entry->numAntennaPorts     = table_entry->old_numAntennaPorts;
                table_entry->old_numAntennaPorts = 0;
                break;
            case COLUMN_CELL_SYSINFO1PROFILEID:
                table_entry->sysInfo1ProfileId     = table_entry->old_sysInfo1ProfileId;
                table_entry->old_sysInfo1ProfileId = 0;
                break;
            case COLUMN_CELL_SYSINFO2PROFILEID:
                table_entry->sysInfo2ProfileId     = table_entry->old_sysInfo2ProfileId;
                table_entry->old_sysInfo2ProfileId = 0;
                break;
            }
        }
#endif /* PWAV_SIH */
        break;

    case MODE_SET_COMMIT:
        break;
    }
    return SNMP_ERR_NOERROR;
}
