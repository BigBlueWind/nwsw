/*
 * Note: this file originally auto-generated by mib2c using
 *  : mib2c.iterate.conf 19302 2010-08-13 12:19:42Z dts12 $
 */

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

#include "bs_modules.h"
#include "all_cfg.h"
#include "all_cmn.h"
#include "tlv_enc_dec.h"

#include "sih.h"
#include "syslog.h"

#include "schedulerConfig.h"

Netsnmp_Node_Handler schedulerConfigTable_handler;
Netsnmp_First_Data_Point  schedulerConfigTable_get_first_data_point;
Netsnmp_Next_Data_Point   schedulerConfigTable_get_next_data_point;

struct schedulerConfigTable_entry  *schedulerConfigTable_head = NULL;
static TBOOL g_sihSchedulerConfigSetReqProcessed = FALSE;
static TBOOL g_sihSchedulerConfigGetReqProcessed = FALSE;
static UINT32 g_prevSchedulerConfigReqCount = 0;
static UINT32 g_schedulerConfigFirstCall = 0;

/* free_schedulerConfigTable */
/**
* @details 
*          This is the routine which frees the scheduler config entry.
*/
void free_schedulerConfigTable(void)
{
  schedulerConfigTableEntry  * current = schedulerConfigTable_head;

  if (current)
  {
  for (current = schedulerConfigTable_head->next ; current != NULL; current = current->next) {
    SNMP_FREE( current );
    }

  SNMP_FREE(schedulerConfigTable_head);
  schedulerConfigTable_head = NULL;
  }
  return;
}

/**
* @details 
*          This is the routine which handles get response from SIH Get Processor
*          and prepare the SNMP GET response for EMS.
* @param tlvArray contains pointer to TLV array.
*/
TBOOL sendSchedulerConfigSnmpGetResponse (
  IO TlvArray    *tlvArray
  )
{
  int  totalNumRow, totalNumCol, i=0, colmn=0;
  schedulerConfigTableEntry * prevPtr = NULL;

  printTLV(tlvArray);

  /* Total no. of Colmns */
  totalNumCol = SCHEDULER_CONFIG_MAX_COL;
  /* Total no. of Row = (No. of TLV)/(No. of Columns) */
  totalNumRow = tlvArray->numTlvs/totalNumCol;

  for (i=1;  i <= totalNumRow;  i++)
      {
      schedulerConfigTableEntry *ptr=(schedulerConfigTableEntry *)malloc(sizeof(schedulerConfigTableEntry));

      clearBytes(ptr,sizeof(schedulerConfigTableEntry));

      /* Fill Data in TLV */
      for(colmn = 1 ; colmn <= totalNumCol ; colmn++)
        {
          logInfo("%d times in for loop",colmn);
       if (colmn EQ COLUMN_SCHEDULERPROFILEID)
           {
            ptr->schedulerProfileId = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
      if(colmn EQ SCHEDULERCONFIG_SCHEDULINGALGORITHM)
      {
        ptr->schedulingAlgorithm = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
        continue;
      }
       if (colmn EQ COLUMN_MAXDLHARQTX)
           {
            ptr->maxDlHarqTx = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_MAXULHARQTX)
           {
            ptr->maxUlHarqTx = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_MAXMSG4HARQTX)
           {
            ptr->maxMsg4HarqTx = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_PFICHCFI)
           {
            ptr->pfichCfi = getUint8FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_PERIODICPHRTIMER)
           {
            ptr->periodicPhrTimer = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_PROHIBITPHRTIMER)
           {
            ptr->prohibitPhrTimer = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_DLPATHLOSSCHANGE)
           {
            ptr->dlPathlossChange = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_PERIODICBSRTIMER)
           {
            ptr->periodicBsrTimer = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
       if (colmn EQ COLUMN_RETXBSRTIMER)
           {
            ptr->retxBsrTimer = getUint32FromArray(tlvArray->tlvInfo[colmn-1].data);
            continue;
           }
        }

       ptr->next = NULL;

      if (prevPtr == NULL) {
           schedulerConfigTable_head =  prevPtr = ptr;
       }

      prevPtr->next = ptr;
      prevPtr = ptr;
     }
    prevPtr->next = NULL;

    if (schedulerConfigTable_head)
        return TRUE;
    else
        return FALSE;
}


/**
* @details 
*          This routine sends enodeb config set request to BSM, it uses SIH Set
*          Processor to create and send the message to BSM.
* @param sihTagInfo is used to have the tag information for set request.
*/
TBOOL sendSchedulerConfigSnmpSetRequest (
      IO TagInfo  sihTagInfo,
      IO TlvArray *tlvArray
      )
{
   schedulerConfigTableEntry * setReqData = NULL;
   TBOOL status = FALSE;
   int colmn = 0;

   setReqData = schedulerConfigTable_head;

   /* Fill Data in TLV */
   for(colmn = 0; colmn < tlvArray->numTlvs; colmn++)
   {
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_SCHEDULERPROFILEID)
         {
           putUint8InArray( setReqData->schedulerProfileId, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->schedulerProfileId);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ SCHEDULERCONFIG_SCHEDULINGALGORITHM)
         {
           putUint32InArray( setReqData->schedulingAlgorithm, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->schedulingAlgorithm);       
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_MAXDLHARQTX)
         {
           putUint8InArray( setReqData->maxDlHarqTx, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->maxDlHarqTx);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_MAXULHARQTX)
         {
           putUint32InArray( setReqData->maxUlHarqTx, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->maxUlHarqTx);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_MAXMSG4HARQTX)
         {
           putUint8InArray( setReqData->maxMsg4HarqTx, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->maxMsg4HarqTx);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_PFICHCFI)
         {
           putUint8InArray( setReqData->pfichCfi, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->pfichCfi);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_PERIODICPHRTIMER)
         {
           putUint32InArray( setReqData->periodicPhrTimer, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->periodicPhrTimer);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_PROHIBITPHRTIMER)
         {
           putUint32InArray( setReqData->prohibitPhrTimer, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->prohibitPhrTimer);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_DLPATHLOSSCHANGE)
         {
           putUint32InArray( setReqData->dlPathlossChange, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->dlPathlossChange);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_PERIODICBSRTIMER)
         {
           putUint32InArray( setReqData->periodicBsrTimer, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->periodicBsrTimer);
         }
         if(tlvArray->tlvInfo[colmn].tag.colId EQ COLUMN_RETXBSRTIMER)
         {
           putUint32InArray( setReqData->retxBsrTimer, tlvArray->tlvInfo[colmn].data );
           tlvArray->tlvInfo[colmn].len = sizeof(setReqData->retxBsrTimer);
         }
       }

   /* Invoke SIH Set Processor */
   status = sihSetProcessor (sihTagInfo,  tlvArray);
   if (status EQ TRUE)
     {
      g_sihSchedulerConfigSetReqProcessed = TRUE;
      g_sihSchedulerConfigGetReqProcessed = FALSE;
      /* free the resources */
      free_schedulerConfigTable();
     }
   return status;
}


/** Initializes the schedulerConfig module */
void
init_schedulerConfig(void)
{
  /* here we initialize all the tables we're planning on supporting */
    initialize_table_schedulerConfigTable();
}

/*  # Determine the first/last column names */

/** Initialize the schedulerConfigTable table by defining its contents and how it's structured */
void
initialize_table_schedulerConfigTable(void)
{
    const oid schedulerConfigTable_oid[] = {1,3,6,1,4,1,9344,501,SCHEDULERCONFIG,1};
    const size_t schedulerConfigTable_oid_len   = OID_LENGTH(schedulerConfigTable_oid);
    netsnmp_handler_registration    *reg;
    netsnmp_iterator_info           *iinfo;
    netsnmp_table_registration_info *table_info;

    DEBUGMSGTL(("schedulerConfig:init", "initializing table schedulerConfigTable\n"));

    reg = netsnmp_create_handler_registration(
              "schedulerConfigTable",     schedulerConfigTable_handler,
              schedulerConfigTable_oid, schedulerConfigTable_oid_len,
              HANDLER_CAN_RWRITE
              );

    table_info = SNMP_MALLOC_TYPEDEF( netsnmp_table_registration_info );
    netsnmp_table_helper_add_indexes(table_info,
                           ASN_UNSIGNED,  /* index: schedulerProfileId */
                           0);
    table_info->min_column = COLUMN_SCHEDULERPROFILEID;
    table_info->max_column = COLUMN_RETXBSRTIMER;
    
    iinfo = SNMP_MALLOC_TYPEDEF( netsnmp_iterator_info );
    iinfo->get_first_data_point = schedulerConfigTable_get_first_data_point;
    iinfo->get_next_data_point  = schedulerConfigTable_get_next_data_point;
    iinfo->table_reginfo        = table_info;
    
    netsnmp_register_table_iterator( reg, iinfo );

    /* Initialise the contents of the table here */
}


#ifndef PWAV_SIH
/* create a new row in the (unsorted) table */
struct schedulerConfigTable_entry *
schedulerConfigTable_createEntry(
                   schedulerProfileId,
                ) {
    struct schedulerConfigTable_entry *entry;

    entry = SNMP_MALLOC_TYPEDEF(struct schedulerConfigTable_entry);
    if (!entry)
        return NULL;

    entry->schedulerProfileId = schedulerProfileId;
    entry->next = schedulerConfigTable_head;
    schedulerConfigTable_head = entry;
    return entry;
}

/* remove a row from the table */
void
schedulerConfigTable_removeEntry( struct schedulerConfigTable_entry *entry ) {
    struct schedulerConfigTable_entry *ptr, *prev;

    if (!entry)
        return;    /* Nothing to remove */

    for ( ptr  = schedulerConfigTable_head, prev = NULL;
          ptr != NULL;
          prev = ptr, ptr = ptr->next ) {
        if ( ptr == entry )
            break;
    }
    if ( !ptr )
        return;    /* Can't find it */

    if ( prev == NULL )
        schedulerConfigTable_head = ptr->next;
    else
        prev->next = ptr->next;

    SNMP_FREE( entry );   /* XXX - release any other internal resources */
}
#endif /* PWAV_SIH */


/* Example iterator hook routines - using 'get_next' to do most of the work */
netsnmp_variable_list *
schedulerConfigTable_get_first_data_point(void **my_loop_context,
                          void **my_data_context,
                          netsnmp_variable_list *put_index_data,
                          netsnmp_iterator_info *mydata)
{
    TagInfo sihTagInfo;
    TBOOL status = FALSE;

    if (g_sihSchedulerConfigGetReqProcessed EQ FALSE)
        {
        /* Set SIH Get Request Tag Info */
        sihTagInfo.tableId = SCHEDULERCONFIG;
        sihTagInfo.rowId = CONFIG_ROW_ID_NONE;
        sihTagInfo.colId = CONFIG_COL_ID_NONE;

        status = sihGetProcessor (sihTagInfo);
        if ( status EQ TRUE )
            {
            logInfo("%s","Get Processor Succedded");
            if (schedulerConfigTable_head)
                {
		g_schedulerConfigFirstCall = 1;
                g_sihSchedulerConfigGetReqProcessed = TRUE;
                }
            }
        else
            logError("Get Processor Failed",NULL);
        }

    *my_loop_context = schedulerConfigTable_head;
    return schedulerConfigTable_get_next_data_point(my_loop_context, my_data_context,
                                    put_index_data,  mydata );
}

netsnmp_variable_list *
schedulerConfigTable_get_next_data_point(void **my_loop_context,
                          void **my_data_context,
                          netsnmp_variable_list *put_index_data,
                          netsnmp_iterator_info *mydata)
{
    struct schedulerConfigTable_entry *entry = (struct schedulerConfigTable_entry *)*my_loop_context;
    netsnmp_variable_list *idx = put_index_data;

    if ( entry ) {
        snmp_set_var_typed_integer( idx, ASN_UNSIGNED, entry->schedulerProfileId );
        idx = idx->next_variable;
        *my_data_context = (void *)entry;
        *my_loop_context = (void *)entry->next;
        return put_index_data;
    } else {
        return NULL;
    }
}


/** handles requests for the schedulerConfigTable table */
int
schedulerConfigTable_handler(
    netsnmp_mib_handler               *handler,
    netsnmp_handler_registration      *reginfo,
    netsnmp_agent_request_info        *reqinfo,
    netsnmp_request_info              *requests) {

    netsnmp_request_info       *request = NULL;
    netsnmp_table_request_info *table_info = NULL;
    struct schedulerConfigTable_entry          *table_entry = NULL;
    int loopCount = 0;
    int ret;
    TagInfo sihTagInfo;
    TlvArray tlvArray;
    int rowIndex = 0, colId = 0;
    TBOOL status = FALSE;

    DEBUGMSGTL(("schedulerConfig:handler", "Processing request (%d)\n", reqinfo->mode));

    switch (reqinfo->mode) {
        /*
         * Read-support (also covers GetNext requests)
         */
    case MODE_GET:
        for (request=requests; request; request=request->next) {

            loopCount++;
            if (request->processed != 0)
            {
	     g_prevSchedulerConfigReqCount = 0;
             g_sihSchedulerConfigGetReqProcessed = FALSE;

             /* free the resources */
             free_schedulerConfigTable();
             /* Here loopCount is decremented, Due to calling of free function two times in SNMP-GETNEXT
              * on single parameter -- 20/07/11 */
             loopCount--;
             continue;
            }

            /* perform anything here that you need to do before each
               request is processed. */

            /* the following extracts the my_data_context pointer set in
               the loop functions above.  You can then use the results to
               help return data for the columns of the enbRegConfigTable table
               in question */

            table_entry = (struct schedulerConfigTable_entry *)
                              netsnmp_extract_iterator_context(request);

            if ( table_entry == NULL) {
                if (reqinfo->mode == MODE_GET) {
                    netsnmp_set_request_error(reqinfo, request,SNMP_NOSUCHINSTANCE);
                    continue;
                }
                /* XXX: no row existed, if you support creation and this is a
                   set, start dealing with it here, else continue */
            }

            table_info  =     netsnmp_extract_table_info(request);

            /* table_info->colnum contains the column number requested */
            /* table_info->indexes contains a linked list of snmp variable
               bindings for the indexes of the table.  Values in the list
               have been set corresponding to the indexes of the
               request */
            if (table_info==NULL) {
                continue;
            }
    
            switch (table_info->colnum) {
            case COLUMN_SCHEDULERPROFILEID:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->schedulerProfileId);
                break;
            case SCHEDULERCONFIG_SCHEDULINGALGORITHM:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->schedulingAlgorithm);
                break;
            case COLUMN_MAXDLHARQTX:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->maxDlHarqTx);
                break;
            case COLUMN_MAXULHARQTX:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->maxUlHarqTx);
                break;
            case COLUMN_MAXMSG4HARQTX:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->maxMsg4HarqTx);
                break;
            case COLUMN_PFICHCFI:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_UNSIGNED,
                                            table_entry->pfichCfi);
                break;
            case COLUMN_PERIODICPHRTIMER:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->periodicPhrTimer);
                break;
            case COLUMN_PROHIBITPHRTIMER:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->prohibitPhrTimer);
                break;
            case COLUMN_DLPATHLOSSCHANGE:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->dlPathlossChange);
                break;
            case COLUMN_PERIODICBSRTIMER:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->periodicBsrTimer);
                break;
            case COLUMN_RETXBSRTIMER:
                if ( !table_entry ) {
                    netsnmp_set_request_error(reqinfo, request,
                                              SNMP_NOSUCHINSTANCE);
                    continue;
                }
                snmp_set_var_typed_integer( request->requestvb, ASN_INTEGER,
                                            table_entry->retxBsrTimer);
                break;
            default:
                netsnmp_set_request_error(reqinfo, request,
                                          SNMP_NOSUCHOBJECT);
                break;
            }
        }
	if(g_schedulerConfigFirstCall EQ 1)
         {
            g_schedulerConfigFirstCall = 0;
            g_prevSchedulerConfigReqCount = loopCount;
            // This will occur in case of, when SNMP-GET or SNMP-GETNEXT of Single Parameter occurred.
            // In the first call itself loopCount becomes one.
            // In General Case, the loopCount will be always > 1 because every table contains 
            // index column to fetch the row and remaining columns contain table attributes.
            if(loopCount EQ 1)
            {
               //Setting it to false in case of SNMP-GET request for single parameter.
               g_sihSchedulerConfigGetReqProcessed = FALSE;
               // Free all resources.
               free_schedulerConfigTable();
            }
         }
         else if(loopCount > 1 || g_prevSchedulerConfigReqCount > 1)
         {
            //update g_prevReqCount with current loopCount for next call of Table_handler
            g_prevSchedulerConfigReqCount = loopCount;
         }
         else if(loopCount EQ 1)
         {
            //Setting it to false in case of SNMP-GET request for single parameter.
            g_sihSchedulerConfigGetReqProcessed = FALSE;
            // Free all resources.
            free_schedulerConfigTable();
         }
        break;

        /*
         * Write-support
         */
    case MODE_SET_RESERVE1:
#ifndef PWAV_SIH
        for (request=requests; request; request=request->next) {
            table_entry = (struct schedulerConfigTable_entry *)
                              netsnmp_extract_iterator_context(request);
            table_info  =     netsnmp_extract_table_info(      request);
    
            switch (table_info->colnum) {
            case COLUMN_SCHEDULERPROFILEID:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case SCHEDULERCONFIG_SCHEDULINGALGORITHM:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_MAXDLHARQTX:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_MAXULHARQTX:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_MAXMSG4HARQTX:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_PFICHCFI:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_PERIODICPHRTIMER:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_PROHIBITPHRTIMER:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_DLPATHLOSSCHANGE:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_PERIODICBSRTIMER:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            case COLUMN_RETXBSRTIMER:
                /* or possibly 'netsnmp_check_vb_int_range' */
                ret = netsnmp_check_vb_int( request->requestvb );
                if ( ret != SNMP_ERR_NOERROR ) {
                    netsnmp_set_request_error( reqinfo, request, ret );
                    return SNMP_ERR_NOERROR;
                }
                break;
            default:
                netsnmp_set_request_error( reqinfo, request,
                                           SNMP_ERR_NOTWRITABLE );
                return SNMP_ERR_NOERROR;
            }
        }
#endif /* PWAV_SIH */
        break;

    case MODE_SET_RESERVE2:
        break;

    case MODE_SET_FREE:
        break;

    case MODE_SET_ACTION:
	g_sihSchedulerConfigSetReqProcessed = FALSE;

        clearBytes(&sihTagInfo, sizeof(TagInfo));
        clearBytes(&tlvArray, sizeof(TlvArray));

        for (request=requests; request; request=request->next) {
            table_entry = (struct schedulerConfigTable_entry *)
                              netsnmp_extract_iterator_context(request);
            table_info  = netsnmp_extract_table_info(request);

            if(table_entry == NULL){
                logInfo(" %s\n", "table_entry is NULL");
                if (reqinfo->mode == MODE_SET_ACTION) {
                    netsnmp_set_request_error(reqinfo, request,SNMP_NOSUCHINSTANCE);
                    continue;
                }
                /* XXX: no row existed, if you support creation and this is a
                   set, start dealing with it here, else continue */
            }

            if(table_info == NULL){
                logInfo(" %s\n", "table_info is NULL");
                continue;
            }

            colId = table_info->colnum;
            /* set the row index */
            rowIndex = requests->index;
    
            switch (table_info->colnum) {
            case COLUMN_SCHEDULERPROFILEID:
                table_entry->schedulerProfileId     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, SCHEDULERCONFIG, rowIndex, COLUMN_SCHEDULERPROFILEID);
                tlvArray.numTlvs++;
                break;
            case SCHEDULERCONFIG_SCHEDULINGALGORITHM:
                table_entry->schedulingAlgorithm     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, SCHEDULERCONFIG, rowIndex, SCHEDULERCONFIG_SCHEDULINGALGORITHM);
                tlvArray.numTlvs++;
                break;
            case COLUMN_MAXDLHARQTX:
                table_entry->maxDlHarqTx     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, SCHEDULERCONFIG, rowIndex, COLUMN_MAXDLHARQTX);
                tlvArray.numTlvs++;
                break;
            case COLUMN_MAXULHARQTX:
                table_entry->maxUlHarqTx     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, SCHEDULERCONFIG, rowIndex, COLUMN_MAXULHARQTX);
                tlvArray.numTlvs++;
                break;
            case COLUMN_MAXMSG4HARQTX:
                table_entry->maxMsg4HarqTx     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, SCHEDULERCONFIG, rowIndex, COLUMN_MAXMSG4HARQTX);
                tlvArray.numTlvs++;
                break;
            case COLUMN_PFICHCFI:
                table_entry->pfichCfi     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, SCHEDULERCONFIG, rowIndex, COLUMN_PFICHCFI);
                tlvArray.numTlvs++;
                break;
            case COLUMN_PERIODICPHRTIMER:
                table_entry->periodicPhrTimer     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, SCHEDULERCONFIG, rowIndex, COLUMN_PERIODICPHRTIMER);
                tlvArray.numTlvs++;
                break;
            case COLUMN_PROHIBITPHRTIMER:
                table_entry->prohibitPhrTimer     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, SCHEDULERCONFIG, rowIndex, COLUMN_PROHIBITPHRTIMER);
                tlvArray.numTlvs++;
                break;
            case COLUMN_DLPATHLOSSCHANGE:
                table_entry->dlPathlossChange     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, SCHEDULERCONFIG, rowIndex, COLUMN_DLPATHLOSSCHANGE);
                tlvArray.numTlvs++;
                break;
            case COLUMN_PERIODICBSRTIMER:
                table_entry->periodicBsrTimer     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, SCHEDULERCONFIG, rowIndex, COLUMN_PERIODICBSRTIMER);
                tlvArray.numTlvs++;
                break;
            case COLUMN_RETXBSRTIMER:
                table_entry->retxBsrTimer     = *request->requestvb->val.integer;
                fillTableInfo(&tlvArray.tlvInfo[tlvArray.numTlvs].tag, SCHEDULERCONFIG, rowIndex, COLUMN_RETXBSRTIMER);
                tlvArray.numTlvs++;
                break;
            }
        }

        if ((request == NULL) && (g_sihSchedulerConfigSetReqProcessed EQ FALSE))
            /* Processed all requests and table entry is filled with
             * requested data. */
            {
            /* Set SIH Set Request Tag Info */
            sihTagInfo.tableId = SCHEDULERCONFIG;

            sihTagInfo.rowId = rowIndex;

            status = sendSchedulerConfigSnmpSetRequest (sihTagInfo, &tlvArray);
            if (status EQ TRUE)
                {
                syslog (LOG_INFO, "SET Succedded");
                }
            else
                netsnmp_set_request_error(reqinfo, requests, SNMP_ERR_GENERR );
            }

        break;

    case MODE_SET_UNDO:
#ifndef PWAV_SIH
        for (request=requests; request; request=request->next) {
            table_entry = (struct schedulerConfigTable_entry *)
                              netsnmp_extract_iterator_context(request);
            table_info  =     netsnmp_extract_table_info(      request);
    
            switch (table_info->colnum) {
            case COLUMN_SCHEDULERPROFILEID:
                table_entry->schedulerProfileId     = table_entry->old_schedulerProfileId;
                table_entry->old_schedulerProfileId = 0;
                break;
            case SCHEDULERCONFIG_SCHEDULINGALGORITHM:
                table_entry->schedulingAlgorithm     = table_entry->old_schedulingAlgorithm;
                table_entry->old_schedulingAlgorithm = 0;
                break;
            case COLUMN_MAXDLHARQTX:
                table_entry->maxDlHarqTx     = table_entry->old_maxDlHarqTx;
                table_entry->old_maxDlHarqTx = 0;
                break;
            case COLUMN_MAXULHARQTX:
                table_entry->maxUlHarqTx     = table_entry->old_maxUlHarqTx;
                table_entry->old_maxUlHarqTx = 0;
                break;
            case COLUMN_MAXMSG4HARQTX:
                table_entry->maxMsg4HarqTx     = table_entry->old_maxMsg4HarqTx;
                table_entry->old_maxMsg4HarqTx = 0;
                break;
            case COLUMN_PFICHCFI:
                table_entry->pfichCfi     = table_entry->old_pfichCfi;
                table_entry->old_pfichCfi = 0;
                break;
            case COLUMN_PERIODICPHRTIMER:
                table_entry->periodicPhrTimer     = table_entry->old_periodicPhrTimer;
                table_entry->old_periodicPhrTimer = 0;
                break;
            case COLUMN_PROHIBITPHRTIMER:
                table_entry->prohibitPhrTimer     = table_entry->old_prohibitPhrTimer;
                table_entry->old_prohibitPhrTimer = 0;
                break;
            case COLUMN_DLPATHLOSSCHANGE:
                table_entry->dlPathlossChange     = table_entry->old_dlPathlossChange;
                table_entry->old_dlPathlossChange = 0;
                break;
            case COLUMN_PERIODICBSRTIMER:
                table_entry->periodicBsrTimer     = table_entry->old_periodicBsrTimer;
                table_entry->old_periodicBsrTimer = 0;
                break;
            case COLUMN_RETXBSRTIMER:
                table_entry->retxBsrTimer     = table_entry->old_retxBsrTimer;
                table_entry->old_retxBsrTimer = 0;
                break;
            }
        }
#endif /* PWAV_SIH */
        break;

    case MODE_SET_COMMIT:
        break;
    }
    return SNMP_ERR_NOERROR;
}
